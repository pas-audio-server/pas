// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#ifndef PROTOBUF_commands_2eproto__INCLUDED
#define PROTOBUF_commands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pas {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_commands_2eproto();
void protobuf_AssignDesc_commands_2eproto();
void protobuf_ShutdownFile_commands_2eproto();

class ArtistCountQuery;
class ContentQuery;
class FolderCountQuery;
class PauseDeviceCommand;
class PlayTrackCommand;
class ResumeDeviceCommand;
class SelectQuery;
class StopDeviceCommand;
class TimeQueryCommand;
class TrackCountQuery;
class TrackQueryCommand;

// ===================================================================

class PlayTrackCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.PlayTrackCommand) */ {
 public:
  PlayTrackCommand();
  virtual ~PlayTrackCommand();

  PlayTrackCommand(const PlayTrackCommand& from);

  inline PlayTrackCommand& operator=(const PlayTrackCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayTrackCommand& default_instance();

  void Swap(PlayTrackCommand* other);

  // implements Message ----------------------------------------------

  inline PlayTrackCommand* New() const { return New(NULL); }

  PlayTrackCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayTrackCommand& from);
  void MergeFrom(const PlayTrackCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayTrackCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // optional uint64 track_id = 2;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 2;
  ::google::protobuf::uint64 track_id() const;
  void set_track_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.PlayTrackCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  ::google::protobuf::uint64 track_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static PlayTrackCommand* default_instance_;
};
// -------------------------------------------------------------------

class PauseDeviceCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.PauseDeviceCommand) */ {
 public:
  PauseDeviceCommand();
  virtual ~PauseDeviceCommand();

  PauseDeviceCommand(const PauseDeviceCommand& from);

  inline PauseDeviceCommand& operator=(const PauseDeviceCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PauseDeviceCommand& default_instance();

  void Swap(PauseDeviceCommand* other);

  // implements Message ----------------------------------------------

  inline PauseDeviceCommand* New() const { return New(NULL); }

  PauseDeviceCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PauseDeviceCommand& from);
  void MergeFrom(const PauseDeviceCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PauseDeviceCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.PauseDeviceCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static PauseDeviceCommand* default_instance_;
};
// -------------------------------------------------------------------

class ResumeDeviceCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.ResumeDeviceCommand) */ {
 public:
  ResumeDeviceCommand();
  virtual ~ResumeDeviceCommand();

  ResumeDeviceCommand(const ResumeDeviceCommand& from);

  inline ResumeDeviceCommand& operator=(const ResumeDeviceCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeDeviceCommand& default_instance();

  void Swap(ResumeDeviceCommand* other);

  // implements Message ----------------------------------------------

  inline ResumeDeviceCommand* New() const { return New(NULL); }

  ResumeDeviceCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResumeDeviceCommand& from);
  void MergeFrom(const ResumeDeviceCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResumeDeviceCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.ResumeDeviceCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static ResumeDeviceCommand* default_instance_;
};
// -------------------------------------------------------------------

class StopDeviceCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.StopDeviceCommand) */ {
 public:
  StopDeviceCommand();
  virtual ~StopDeviceCommand();

  StopDeviceCommand(const StopDeviceCommand& from);

  inline StopDeviceCommand& operator=(const StopDeviceCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopDeviceCommand& default_instance();

  void Swap(StopDeviceCommand* other);

  // implements Message ----------------------------------------------

  inline StopDeviceCommand* New() const { return New(NULL); }

  StopDeviceCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopDeviceCommand& from);
  void MergeFrom(const StopDeviceCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopDeviceCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.StopDeviceCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static StopDeviceCommand* default_instance_;
};
// -------------------------------------------------------------------

class TrackQueryCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.TrackQueryCommand) */ {
 public:
  TrackQueryCommand();
  virtual ~TrackQueryCommand();

  TrackQueryCommand(const TrackQueryCommand& from);

  inline TrackQueryCommand& operator=(const TrackQueryCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackQueryCommand& default_instance();

  void Swap(TrackQueryCommand* other);

  // implements Message ----------------------------------------------

  inline TrackQueryCommand* New() const { return New(NULL); }

  TrackQueryCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackQueryCommand& from);
  void MergeFrom(const TrackQueryCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackQueryCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.TrackQueryCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static TrackQueryCommand* default_instance_;
};
// -------------------------------------------------------------------

class TimeQueryCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.TimeQueryCommand) */ {
 public:
  TimeQueryCommand();
  virtual ~TimeQueryCommand();

  TimeQueryCommand(const TimeQueryCommand& from);

  inline TimeQueryCommand& operator=(const TimeQueryCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeQueryCommand& default_instance();

  void Swap(TimeQueryCommand* other);

  // implements Message ----------------------------------------------

  inline TimeQueryCommand* New() const { return New(NULL); }

  TimeQueryCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeQueryCommand& from);
  void MergeFrom(const TimeQueryCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimeQueryCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 device_id = 1;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  ::google::protobuf::uint64 device_id() const;
  void set_device_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pas.TimeQueryCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static TimeQueryCommand* default_instance_;
};
// -------------------------------------------------------------------

class TrackCountQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.TrackCountQuery) */ {
 public:
  TrackCountQuery();
  virtual ~TrackCountQuery();

  TrackCountQuery(const TrackCountQuery& from);

  inline TrackCountQuery& operator=(const TrackCountQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackCountQuery& default_instance();

  void Swap(TrackCountQuery* other);

  // implements Message ----------------------------------------------

  inline TrackCountQuery* New() const { return New(NULL); }

  TrackCountQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackCountQuery& from);
  void MergeFrom(const TrackCountQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackCountQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pas.TrackCountQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static TrackCountQuery* default_instance_;
};
// -------------------------------------------------------------------

class ArtistCountQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.ArtistCountQuery) */ {
 public:
  ArtistCountQuery();
  virtual ~ArtistCountQuery();

  ArtistCountQuery(const ArtistCountQuery& from);

  inline ArtistCountQuery& operator=(const ArtistCountQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtistCountQuery& default_instance();

  void Swap(ArtistCountQuery* other);

  // implements Message ----------------------------------------------

  inline ArtistCountQuery* New() const { return New(NULL); }

  ArtistCountQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArtistCountQuery& from);
  void MergeFrom(const ArtistCountQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArtistCountQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pas.ArtistCountQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static ArtistCountQuery* default_instance_;
};
// -------------------------------------------------------------------

class FolderCountQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.FolderCountQuery) */ {
 public:
  FolderCountQuery();
  virtual ~FolderCountQuery();

  FolderCountQuery(const FolderCountQuery& from);

  inline FolderCountQuery& operator=(const FolderCountQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FolderCountQuery& default_instance();

  void Swap(FolderCountQuery* other);

  // implements Message ----------------------------------------------

  inline FolderCountQuery* New() const { return New(NULL); }

  FolderCountQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FolderCountQuery& from);
  void MergeFrom(const FolderCountQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FolderCountQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pas.FolderCountQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static FolderCountQuery* default_instance_;
};
// -------------------------------------------------------------------

class SelectQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.SelectQuery) */ {
 public:
  SelectQuery();
  virtual ~SelectQuery();

  SelectQuery(const SelectQuery& from);

  inline SelectQuery& operator=(const SelectQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectQuery& default_instance();

  void Swap(SelectQuery* other);

  // implements Message ----------------------------------------------

  inline SelectQuery* New() const { return New(NULL); }

  SelectQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectQuery& from);
  void MergeFrom(const SelectQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string column = 1;
  void clear_column();
  static const int kColumnFieldNumber = 1;
  const ::std::string& column() const;
  void set_column(const ::std::string& value);
  void set_column(const char* value);
  void set_column(const char* value, size_t size);
  ::std::string* mutable_column();
  ::std::string* release_column();
  void set_allocated_column(::std::string* column);

  // optional string pattern = 2;
  void clear_pattern();
  static const int kPatternFieldNumber = 2;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // @@protoc_insertion_point(class_scope:pas.SelectQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr column_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static SelectQuery* default_instance_;
};
// -------------------------------------------------------------------

class ContentQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pas.ContentQuery) */ {
 public:
  ContentQuery();
  virtual ~ContentQuery();

  ContentQuery(const ContentQuery& from);

  inline ContentQuery& operator=(const ContentQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentQuery& default_instance();

  void Swap(ContentQuery* other);

  // implements Message ----------------------------------------------

  inline ContentQuery* New() const { return New(NULL); }

  ContentQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentQuery& from);
  void MergeFrom(const ContentQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:pas.ContentQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_commands_2eproto();
  friend void protobuf_AssignDesc_commands_2eproto();
  friend void protobuf_ShutdownFile_commands_2eproto();

  void InitAsDefaultInstance();
  static ContentQuery* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayTrackCommand

// optional uint64 device_id = 1;
inline void PlayTrackCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayTrackCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.device_id)
  return device_id_;
}
inline void PlayTrackCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.device_id)
}

// optional uint64 track_id = 2;
inline void PlayTrackCommand::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PlayTrackCommand::track_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.track_id)
  return track_id_;
}
inline void PlayTrackCommand::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.track_id)
}

// -------------------------------------------------------------------

// PauseDeviceCommand

// optional uint64 device_id = 1;
inline void PauseDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PauseDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.device_id)
  return device_id_;
}
inline void PauseDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.device_id)
}

// -------------------------------------------------------------------

// ResumeDeviceCommand

// optional uint64 device_id = 1;
inline void ResumeDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResumeDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.device_id)
  return device_id_;
}
inline void ResumeDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.device_id)
}

// -------------------------------------------------------------------

// StopDeviceCommand

// optional uint64 device_id = 1;
inline void StopDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StopDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.device_id)
  return device_id_;
}
inline void StopDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.device_id)
}

// -------------------------------------------------------------------

// TrackQueryCommand

// optional uint64 device_id = 1;
inline void TrackQueryCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrackQueryCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.TrackQueryCommand.device_id)
  return device_id_;
}
inline void TrackQueryCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackQueryCommand.device_id)
}

// -------------------------------------------------------------------

// TimeQueryCommand

// optional uint64 device_id = 1;
inline void TimeQueryCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeQueryCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.TimeQueryCommand.device_id)
  return device_id_;
}
inline void TimeQueryCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.TimeQueryCommand.device_id)
}

// -------------------------------------------------------------------

// TrackCountQuery

// -------------------------------------------------------------------

// ArtistCountQuery

// -------------------------------------------------------------------

// FolderCountQuery

// -------------------------------------------------------------------

// SelectQuery

// optional string column = 1;
inline void SelectQuery::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectQuery::column() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.column)
  return column_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectQuery::set_column(const ::std::string& value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.column)
}
inline void SelectQuery::set_column(const char* value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.column)
}
inline void SelectQuery::set_column(const char* value, size_t size) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.column)
}
inline ::std::string* SelectQuery::mutable_column() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectQuery::release_column() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.column)
  
  return column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectQuery::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    
  } else {
    
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.column)
}

// optional string pattern = 2;
inline void SelectQuery::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectQuery::pattern() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectQuery::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.pattern)
}
inline void SelectQuery::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.pattern)
}
inline void SelectQuery::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.pattern)
}
inline ::std::string* SelectQuery::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectQuery::release_pattern() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectQuery::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.pattern)
}

// -------------------------------------------------------------------

// ContentQuery

// optional string path = 1;
inline void ContentQuery::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentQuery::path() const {
  // @@protoc_insertion_point(field_get:pas.ContentQuery.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentQuery::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.ContentQuery.path)
}
inline void ContentQuery::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.ContentQuery.path)
}
inline void ContentQuery::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.ContentQuery.path)
}
inline ::std::string* ContentQuery::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:pas.ContentQuery.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentQuery::release_path() {
  // @@protoc_insertion_point(field_release:pas.ContentQuery.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentQuery::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:pas.ContentQuery.path)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pas

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commands_2eproto__INCLUDED
