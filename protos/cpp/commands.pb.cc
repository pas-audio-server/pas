// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pas {

namespace {

const ::google::protobuf::Descriptor* Row_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Row_reflection_ = NULL;
const ::google::protobuf::Descriptor* Row_ResultsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DacInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DacInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenericPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayTrackCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayTrackCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* PauseDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PauseDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResumeDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResumeDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhoDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhoDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhatDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhatDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtistCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtistCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* FolderCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FolderCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhenDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhenDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneInteger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneInteger_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneString_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneFloat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_commands_2eproto() {
  protobuf_AddDesc_commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commands.proto");
  GOOGLE_CHECK(file != NULL);
  Row_descriptor_ = file->message_type(0);
  static const int Row_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, results_),
  };
  Row_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Row_descriptor_,
      Row::default_instance_,
      Row_offsets_,
      -1,
      -1,
      -1,
      sizeof(Row),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _is_default_instance_));
  Row_ResultsEntry_descriptor_ = Row_descriptor_->nested_type(0);
  DacInfo_descriptor_ = file->message_type(1);
  static const int DacInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, row_),
  };
  DacInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DacInfo_descriptor_,
      DacInfo::default_instance_,
      DacInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(DacInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, _is_default_instance_));
  SelectResult_descriptor_ = file->message_type(2);
  static const int SelectResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, row_),
  };
  SelectResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelectResult_descriptor_,
      SelectResult::default_instance_,
      SelectResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(SelectResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, _is_default_instance_));
  GenericPB_descriptor_ = file->message_type(3);
  static const int GenericPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, type_),
  };
  GenericPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericPB_descriptor_,
      GenericPB::default_instance_,
      GenericPB_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, _is_default_instance_));
  PlayTrackCommand_descriptor_ = file->message_type(4);
  static const int PlayTrackCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, track_id_),
  };
  PlayTrackCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayTrackCommand_descriptor_,
      PlayTrackCommand::default_instance_,
      PlayTrackCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayTrackCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, _is_default_instance_));
  PauseDeviceCommand_descriptor_ = file->message_type(5);
  static const int PauseDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, device_id_),
  };
  PauseDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PauseDeviceCommand_descriptor_,
      PauseDeviceCommand::default_instance_,
      PauseDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(PauseDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, _is_default_instance_));
  ResumeDeviceCommand_descriptor_ = file->message_type(6);
  static const int ResumeDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, device_id_),
  };
  ResumeDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResumeDeviceCommand_descriptor_,
      ResumeDeviceCommand::default_instance_,
      ResumeDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResumeDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, _is_default_instance_));
  ClearDeviceCommand_descriptor_ = file->message_type(7);
  static const int ClearDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, device_id_),
  };
  ClearDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearDeviceCommand_descriptor_,
      ClearDeviceCommand::default_instance_,
      ClearDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClearDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, _is_default_instance_));
  StopDeviceCommand_descriptor_ = file->message_type(8);
  static const int StopDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, device_id_),
  };
  StopDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopDeviceCommand_descriptor_,
      StopDeviceCommand::default_instance_,
      StopDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, _is_default_instance_));
  WhoDeviceCommand_descriptor_ = file->message_type(9);
  static const int WhoDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, device_id_),
  };
  WhoDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhoDeviceCommand_descriptor_,
      WhoDeviceCommand::default_instance_,
      WhoDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(WhoDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, _is_default_instance_));
  WhatDeviceCommand_descriptor_ = file->message_type(10);
  static const int WhatDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, device_id_),
  };
  WhatDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhatDeviceCommand_descriptor_,
      WhatDeviceCommand::default_instance_,
      WhatDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(WhatDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, _is_default_instance_));
  TrackCountQuery_descriptor_ = file->message_type(11);
  static const int TrackCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, type_),
  };
  TrackCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackCountQuery_descriptor_,
      TrackCountQuery::default_instance_,
      TrackCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, _is_default_instance_));
  ArtistCountQuery_descriptor_ = file->message_type(12);
  static const int ArtistCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, type_),
  };
  ArtistCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArtistCountQuery_descriptor_,
      ArtistCountQuery::default_instance_,
      ArtistCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArtistCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, _is_default_instance_));
  FolderCountQuery_descriptor_ = file->message_type(13);
  static const int FolderCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, type_),
  };
  FolderCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FolderCountQuery_descriptor_,
      FolderCountQuery::default_instance_,
      FolderCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(FolderCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, _is_default_instance_));
  SelectQuery_descriptor_ = file->message_type(14);
  static const int SelectQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, pattern_),
  };
  SelectQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelectQuery_descriptor_,
      SelectQuery::default_instance_,
      SelectQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(SelectQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, _is_default_instance_));
  WhenDeviceCommand_descriptor_ = file->message_type(15);
  static const int WhenDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, device_id_),
  };
  WhenDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhenDeviceCommand_descriptor_,
      WhenDeviceCommand::default_instance_,
      WhenDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(WhenDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, _is_default_instance_));
  OneInteger_descriptor_ = file->message_type(16);
  static const int OneInteger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, value_),
  };
  OneInteger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OneInteger_descriptor_,
      OneInteger::default_instance_,
      OneInteger_offsets_,
      -1,
      -1,
      -1,
      sizeof(OneInteger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, _is_default_instance_));
  OneString_descriptor_ = file->message_type(17);
  static const int OneString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, value_),
  };
  OneString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OneString_descriptor_,
      OneString::default_instance_,
      OneString_offsets_,
      -1,
      -1,
      -1,
      sizeof(OneString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, _is_default_instance_));
  OneFloat_descriptor_ = file->message_type(18);
  static const int OneFloat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, value_),
  };
  OneFloat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OneFloat_descriptor_,
      OneFloat::default_instance_,
      OneFloat_offsets_,
      -1,
      -1,
      -1,
      sizeof(OneFloat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, _is_default_instance_));
  Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Row_descriptor_, &Row::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Row_ResultsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Row_ResultsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DacInfo_descriptor_, &DacInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelectResult_descriptor_, &SelectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericPB_descriptor_, &GenericPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayTrackCommand_descriptor_, &PlayTrackCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PauseDeviceCommand_descriptor_, &PauseDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResumeDeviceCommand_descriptor_, &ResumeDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearDeviceCommand_descriptor_, &ClearDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopDeviceCommand_descriptor_, &StopDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhoDeviceCommand_descriptor_, &WhoDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhatDeviceCommand_descriptor_, &WhatDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackCountQuery_descriptor_, &TrackCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArtistCountQuery_descriptor_, &ArtistCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FolderCountQuery_descriptor_, &FolderCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelectQuery_descriptor_, &SelectQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhenDeviceCommand_descriptor_, &WhenDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OneInteger_descriptor_, &OneInteger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OneString_descriptor_, &OneString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OneFloat_descriptor_, &OneFloat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commands_2eproto() {
  delete Row::default_instance_;
  delete Row_reflection_;
  delete DacInfo::default_instance_;
  delete DacInfo_reflection_;
  delete SelectResult::default_instance_;
  delete SelectResult_reflection_;
  delete GenericPB::default_instance_;
  delete GenericPB_reflection_;
  delete PlayTrackCommand::default_instance_;
  delete PlayTrackCommand_reflection_;
  delete PauseDeviceCommand::default_instance_;
  delete PauseDeviceCommand_reflection_;
  delete ResumeDeviceCommand::default_instance_;
  delete ResumeDeviceCommand_reflection_;
  delete ClearDeviceCommand::default_instance_;
  delete ClearDeviceCommand_reflection_;
  delete StopDeviceCommand::default_instance_;
  delete StopDeviceCommand_reflection_;
  delete WhoDeviceCommand::default_instance_;
  delete WhoDeviceCommand_reflection_;
  delete WhatDeviceCommand::default_instance_;
  delete WhatDeviceCommand_reflection_;
  delete TrackCountQuery::default_instance_;
  delete TrackCountQuery_reflection_;
  delete ArtistCountQuery::default_instance_;
  delete ArtistCountQuery_reflection_;
  delete FolderCountQuery::default_instance_;
  delete FolderCountQuery_reflection_;
  delete SelectQuery::default_instance_;
  delete SelectQuery_reflection_;
  delete WhenDeviceCommand::default_instance_;
  delete WhenDeviceCommand_reflection_;
  delete OneInteger::default_instance_;
  delete OneInteger_reflection_;
  delete OneString::default_instance_;
  delete OneString_reflection_;
  delete OneFloat::default_instance_;
  delete OneFloat_reflection_;
}

void protobuf_AddDesc_commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016commands.proto\022\003pas\"v\n\003Row\022\027\n\004type\030\001 \001"
    "(\0162\t.pas.Type\022&\n\007results\030\002 \003(\0132\025.pas.Row"
    ".ResultsEntry\032.\n\014ResultsEntry\022\013\n\003key\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"9\n\007DacInfo\022\027\n\004type"
    "\030\001 \001(\0162\t.pas.Type\022\025\n\003row\030\002 \003(\0132\010.pas.Row"
    "\">\n\014SelectResult\022\027\n\004type\030\001 \001(\0162\t.pas.Typ"
    "e\022\025\n\003row\030\002 \003(\0132\010.pas.Row\"$\n\tGenericPB\022\027\n"
    "\004type\030\001 \001(\0162\t.pas.Type\"P\n\020PlayTrackComma"
    "nd\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id"
    "\030\002 \001(\004\022\020\n\010track_id\030\003 \001(\004\"@\n\022PauseDeviceC"
    "ommand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevic"
    "e_id\030\002 \001(\004\"A\n\023ResumeDeviceCommand\022\027\n\004typ"
    "e\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\"@\n"
    "\022ClearDeviceCommand\022\027\n\004type\030\001 \001(\0162\t.pas."
    "Type\022\021\n\tdevice_id\030\002 \001(\004\"\?\n\021StopDeviceCom"
    "mand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_"
    "id\030\002 \001(\004\">\n\020WhoDeviceCommand\022\027\n\004type\030\001 \001"
    "(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\"\?\n\021What"
    "DeviceCommand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021"
    "\n\tdevice_id\030\002 \001(\004\"*\n\017TrackCountQuery\022\027\n\004"
    "type\030\001 \001(\0162\t.pas.Type\"+\n\020ArtistCountQuer"
    "y\022\027\n\004type\030\001 \001(\0162\t.pas.Type\"+\n\020FolderCoun"
    "tQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Type\"G\n\013Selec"
    "tQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\016\n\006colum"
    "n\030\002 \001(\t\022\017\n\007pattern\030\003 \001(\t\"\?\n\021WhenDeviceCo"
    "mmand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice"
    "_id\030\002 \001(\004\"4\n\nOneInteger\022\027\n\004type\030\001 \001(\0162\t."
    "pas.Type\022\r\n\005value\030\002 \001(\004\"3\n\tOneString\022\027\n\004"
    "type\030\001 \001(\0162\t.pas.Type\022\r\n\005value\030\002 \001(\t\"2\n\010"
    "OneFloat\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\r\n\005val"
    "ue\030\002 \001(\002*\332\002\n\004Type\022\013\n\007GENERIC\020\000\022\025\n\021PLAY_T"
    "RACK_DEVICE\020\001\022\020\n\014PAUSE_DEVICE\020\002\022\021\n\rRESUM"
    "E_DEVICE\020\003\022\017\n\013STOP_DEVICE\020\004\022\016\n\nWHO_DEVIC"
    "E\020\005\022\017\n\013WHAT_DEVICE\020\006\022\017\n\013TRACK_COUNT\020\007\022\020\n"
    "\014ARTIST_COUNT\020\010\022\020\n\014FOLDER_COUNT\020\t\022\020\n\014SEL"
    "ECT_QUERY\020\n\022\017\n\013WHEN_DEVICE\020\014\022\020\n\014CLEAR_DE"
    "VICE\020\r\022\021\n\rSELECT_RESULT\020\016\022\007\n\003ROW\020\017\022\013\n\007ON"
    "E_INT\020\020\022\016\n\nONE_STRING\020\021\022\r\n\tONE_FLOAT\020\022\022\024"
    "\n\020DAC_INFO_COMMAND\020\023\022\017\n\013NEXT_DEVICE\020\024b\006p"
    "roto3", 1565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commands.proto", &protobuf_RegisterTypes);
  Row::default_instance_ = new Row();
  DacInfo::default_instance_ = new DacInfo();
  SelectResult::default_instance_ = new SelectResult();
  GenericPB::default_instance_ = new GenericPB();
  PlayTrackCommand::default_instance_ = new PlayTrackCommand();
  PauseDeviceCommand::default_instance_ = new PauseDeviceCommand();
  ResumeDeviceCommand::default_instance_ = new ResumeDeviceCommand();
  ClearDeviceCommand::default_instance_ = new ClearDeviceCommand();
  StopDeviceCommand::default_instance_ = new StopDeviceCommand();
  WhoDeviceCommand::default_instance_ = new WhoDeviceCommand();
  WhatDeviceCommand::default_instance_ = new WhatDeviceCommand();
  TrackCountQuery::default_instance_ = new TrackCountQuery();
  ArtistCountQuery::default_instance_ = new ArtistCountQuery();
  FolderCountQuery::default_instance_ = new FolderCountQuery();
  SelectQuery::default_instance_ = new SelectQuery();
  WhenDeviceCommand::default_instance_ = new WhenDeviceCommand();
  OneInteger::default_instance_ = new OneInteger();
  OneString::default_instance_ = new OneString();
  OneFloat::default_instance_ = new OneFloat();
  Row::default_instance_->InitAsDefaultInstance();
  DacInfo::default_instance_->InitAsDefaultInstance();
  SelectResult::default_instance_->InitAsDefaultInstance();
  GenericPB::default_instance_->InitAsDefaultInstance();
  PlayTrackCommand::default_instance_->InitAsDefaultInstance();
  PauseDeviceCommand::default_instance_->InitAsDefaultInstance();
  ResumeDeviceCommand::default_instance_->InitAsDefaultInstance();
  ClearDeviceCommand::default_instance_->InitAsDefaultInstance();
  StopDeviceCommand::default_instance_->InitAsDefaultInstance();
  WhoDeviceCommand::default_instance_->InitAsDefaultInstance();
  WhatDeviceCommand::default_instance_->InitAsDefaultInstance();
  TrackCountQuery::default_instance_->InitAsDefaultInstance();
  ArtistCountQuery::default_instance_->InitAsDefaultInstance();
  FolderCountQuery::default_instance_->InitAsDefaultInstance();
  SelectQuery::default_instance_->InitAsDefaultInstance();
  WhenDeviceCommand::default_instance_->InitAsDefaultInstance();
  OneInteger::default_instance_->InitAsDefaultInstance();
  OneString::default_instance_->InitAsDefaultInstance();
  OneFloat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commands_2eproto {
  StaticDescriptorInitializer_commands_2eproto() {
    protobuf_AddDesc_commands_2eproto();
  }
} static_descriptor_initializer_commands_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kTypeFieldNumber;
const int Row::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.Row)
}

void Row::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Row::Row(const Row& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.Row)
}

void Row::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  results_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  results_.SetEntryDescriptor(
      &::pas::Row_ResultsEntry_descriptor_);
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:pas.Row)
  SharedDtor();
}

void Row::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Row_descriptor_;
}

const Row& Row::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

Row* Row::default_instance_ = NULL;

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.Row)
  type_ = 0;
  results_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // map<string, string> results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(input->IncrementRecursionDepth());
         parse_loop_results:
          Row_ResultsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&results_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.Row.ResultsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.Row.ResultsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_results;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.Row)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // map<string, string> results = 2;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:pas.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.Row)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // map<string, string> results = 2;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.value");
      }
    };

    if (deterministic &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.Row)
  return target;
}

int Row::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.Row)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // map<string, string> results = 2;
  total_size += 1 * this->results_size();
  {
    ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->results().begin();
        it != this->results().end(); ++it) {
      entry.reset(results_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.Row)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Row* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.Row)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  results_.MergeFrom(from.results_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {

  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  std::swap(type_, other->type_);
  results_.Swap(&other->results_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Row_descriptor_;
  metadata.reflection = Row_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// optional .pas.Type type = 1;
void Row::clear_type() {
  type_ = 0;
}
 ::pas::Type Row::type() const {
  // @@protoc_insertion_point(field_get:pas.Row.type)
  return static_cast< ::pas::Type >(type_);
}
 void Row::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.Row.type)
}

// map<string, string> results = 2;
int Row::results_size() const {
  return results_.size();
}
void Row::clear_results() {
  results_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Row::results() const {
  // @@protoc_insertion_point(field_map:pas.Row.results)
  return results_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Row::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:pas.Row.results)
  return results_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DacInfo::kTypeFieldNumber;
const int DacInfo::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DacInfo::DacInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.DacInfo)
}

void DacInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DacInfo::DacInfo(const DacInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.DacInfo)
}

void DacInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

DacInfo::~DacInfo() {
  // @@protoc_insertion_point(destructor:pas.DacInfo)
  SharedDtor();
}

void DacInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DacInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DacInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DacInfo_descriptor_;
}

const DacInfo& DacInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

DacInfo* DacInfo::default_instance_ = NULL;

DacInfo* DacInfo::New(::google::protobuf::Arena* arena) const {
  DacInfo* n = new DacInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DacInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.DacInfo)
  type_ = 0;
  row_.Clear();
}

bool DacInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.DacInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row;
        break;
      }

      // repeated .pas.Row row = 2;
      case 2: {
        if (tag == 18) {
         parse_row:
          DO_(input->IncrementRecursionDepth());
         parse_loop_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_row;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.DacInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.DacInfo)
  return false;
#undef DO_
}

void DacInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.DacInfo)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.DacInfo)
}

::google::protobuf::uint8* DacInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.DacInfo)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.DacInfo)
  return target;
}

int DacInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.DacInfo)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .pas.Row row = 2;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DacInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.DacInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DacInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DacInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.DacInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.DacInfo)
    MergeFrom(*source);
  }
}

void DacInfo::MergeFrom(const DacInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.DacInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  row_.MergeFrom(from.row_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DacInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.DacInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DacInfo::CopyFrom(const DacInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.DacInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DacInfo::IsInitialized() const {

  return true;
}

void DacInfo::Swap(DacInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DacInfo::InternalSwap(DacInfo* other) {
  std::swap(type_, other->type_);
  row_.UnsafeArenaSwap(&other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DacInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DacInfo_descriptor_;
  metadata.reflection = DacInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DacInfo

// optional .pas.Type type = 1;
void DacInfo::clear_type() {
  type_ = 0;
}
 ::pas::Type DacInfo::type() const {
  // @@protoc_insertion_point(field_get:pas.DacInfo.type)
  return static_cast< ::pas::Type >(type_);
}
 void DacInfo::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.DacInfo.type)
}

// repeated .pas.Row row = 2;
int DacInfo::row_size() const {
  return row_.size();
}
void DacInfo::clear_row() {
  row_.Clear();
}
const ::pas::Row& DacInfo::row(int index) const {
  // @@protoc_insertion_point(field_get:pas.DacInfo.row)
  return row_.Get(index);
}
::pas::Row* DacInfo::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:pas.DacInfo.row)
  return row_.Mutable(index);
}
::pas::Row* DacInfo::add_row() {
  // @@protoc_insertion_point(field_add:pas.DacInfo.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::pas::Row >*
DacInfo::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:pas.DacInfo.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::pas::Row >&
DacInfo::row() const {
  // @@protoc_insertion_point(field_list:pas.DacInfo.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectResult::kTypeFieldNumber;
const int SelectResult::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectResult::SelectResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.SelectResult)
}

void SelectResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SelectResult::SelectResult(const SelectResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.SelectResult)
}

void SelectResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

SelectResult::~SelectResult() {
  // @@protoc_insertion_point(destructor:pas.SelectResult)
  SharedDtor();
}

void SelectResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectResult_descriptor_;
}

const SelectResult& SelectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

SelectResult* SelectResult::default_instance_ = NULL;

SelectResult* SelectResult::New(::google::protobuf::Arena* arena) const {
  SelectResult* n = new SelectResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.SelectResult)
  type_ = 0;
  row_.Clear();
}

bool SelectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.SelectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row;
        break;
      }

      // repeated .pas.Row row = 2;
      case 2: {
        if (tag == 18) {
         parse_row:
          DO_(input->IncrementRecursionDepth());
         parse_loop_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_row;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.SelectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.SelectResult)
  return false;
#undef DO_
}

void SelectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.SelectResult)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.SelectResult)
}

::google::protobuf::uint8* SelectResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.SelectResult)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.SelectResult)
  return target;
}

int SelectResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.SelectResult)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .pas.Row row = 2;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.SelectResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SelectResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.SelectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.SelectResult)
    MergeFrom(*source);
  }
}

void SelectResult::MergeFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.SelectResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  row_.MergeFrom(from.row_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SelectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.SelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectResult::CopyFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.SelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResult::IsInitialized() const {

  return true;
}

void SelectResult::Swap(SelectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectResult::InternalSwap(SelectResult* other) {
  std::swap(type_, other->type_);
  row_.UnsafeArenaSwap(&other->row_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectResult_descriptor_;
  metadata.reflection = SelectResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectResult

// optional .pas.Type type = 1;
void SelectResult::clear_type() {
  type_ = 0;
}
 ::pas::Type SelectResult::type() const {
  // @@protoc_insertion_point(field_get:pas.SelectResult.type)
  return static_cast< ::pas::Type >(type_);
}
 void SelectResult::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.SelectResult.type)
}

// repeated .pas.Row row = 2;
int SelectResult::row_size() const {
  return row_.size();
}
void SelectResult::clear_row() {
  row_.Clear();
}
const ::pas::Row& SelectResult::row(int index) const {
  // @@protoc_insertion_point(field_get:pas.SelectResult.row)
  return row_.Get(index);
}
::pas::Row* SelectResult::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:pas.SelectResult.row)
  return row_.Mutable(index);
}
::pas::Row* SelectResult::add_row() {
  // @@protoc_insertion_point(field_add:pas.SelectResult.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::pas::Row >*
SelectResult::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:pas.SelectResult.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::pas::Row >&
SelectResult::row() const {
  // @@protoc_insertion_point(field_list:pas.SelectResult.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericPB::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericPB::GenericPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.GenericPB)
}

void GenericPB::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GenericPB::GenericPB(const GenericPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.GenericPB)
}

void GenericPB::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

GenericPB::~GenericPB() {
  // @@protoc_insertion_point(destructor:pas.GenericPB)
  SharedDtor();
}

void GenericPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenericPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericPB_descriptor_;
}

const GenericPB& GenericPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

GenericPB* GenericPB::default_instance_ = NULL;

GenericPB* GenericPB::New(::google::protobuf::Arena* arena) const {
  GenericPB* n = new GenericPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericPB::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.GenericPB)
  type_ = 0;
}

bool GenericPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.GenericPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.GenericPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.GenericPB)
  return false;
#undef DO_
}

void GenericPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.GenericPB)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.GenericPB)
}

::google::protobuf::uint8* GenericPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.GenericPB)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.GenericPB)
  return target;
}

int GenericPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.GenericPB)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.GenericPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.GenericPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.GenericPB)
    MergeFrom(*source);
  }
}

void GenericPB::MergeFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.GenericPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GenericPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericPB::CopyFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPB::IsInitialized() const {

  return true;
}

void GenericPB::Swap(GenericPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericPB::InternalSwap(GenericPB* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericPB_descriptor_;
  metadata.reflection = GenericPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericPB

// optional .pas.Type type = 1;
void GenericPB::clear_type() {
  type_ = 0;
}
 ::pas::Type GenericPB::type() const {
  // @@protoc_insertion_point(field_get:pas.GenericPB.type)
  return static_cast< ::pas::Type >(type_);
}
 void GenericPB::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.GenericPB.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayTrackCommand::kTypeFieldNumber;
const int PlayTrackCommand::kDeviceIdFieldNumber;
const int PlayTrackCommand::kTrackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayTrackCommand::PlayTrackCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PlayTrackCommand)
}

void PlayTrackCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayTrackCommand::PlayTrackCommand(const PlayTrackCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.PlayTrackCommand)
}

void PlayTrackCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  track_id_ = GOOGLE_ULONGLONG(0);
}

PlayTrackCommand::~PlayTrackCommand() {
  // @@protoc_insertion_point(destructor:pas.PlayTrackCommand)
  SharedDtor();
}

void PlayTrackCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayTrackCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayTrackCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayTrackCommand_descriptor_;
}

const PlayTrackCommand& PlayTrackCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

PlayTrackCommand* PlayTrackCommand::default_instance_ = NULL;

PlayTrackCommand* PlayTrackCommand::New(::google::protobuf::Arena* arena) const {
  PlayTrackCommand* n = new PlayTrackCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayTrackCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PlayTrackCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayTrackCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayTrackCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayTrackCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PlayTrackCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_track_id;
        break;
      }

      // optional uint64 track_id = 3;
      case 3: {
        if (tag == 24) {
         parse_track_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PlayTrackCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PlayTrackCommand)
  return false;
#undef DO_
}

void PlayTrackCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PlayTrackCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->track_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PlayTrackCommand)
}

::google::protobuf::uint8* PlayTrackCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.PlayTrackCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->track_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PlayTrackCommand)
  return target;
}

int PlayTrackCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PlayTrackCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->track_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayTrackCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PlayTrackCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayTrackCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayTrackCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PlayTrackCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PlayTrackCommand)
    MergeFrom(*source);
  }
}

void PlayTrackCommand::MergeFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PlayTrackCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
}

void PlayTrackCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTrackCommand::CopyFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTrackCommand::IsInitialized() const {

  return true;
}

void PlayTrackCommand::Swap(PlayTrackCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayTrackCommand::InternalSwap(PlayTrackCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  std::swap(track_id_, other->track_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayTrackCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayTrackCommand_descriptor_;
  metadata.reflection = PlayTrackCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayTrackCommand

// optional .pas.Type type = 1;
void PlayTrackCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type PlayTrackCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void PlayTrackCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.type)
}

// optional uint64 device_id = 2;
void PlayTrackCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayTrackCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.device_id)
  return device_id_;
}
 void PlayTrackCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.device_id)
}

// optional uint64 track_id = 3;
void PlayTrackCommand::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayTrackCommand::track_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.track_id)
  return track_id_;
}
 void PlayTrackCommand::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.track_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PauseDeviceCommand::kTypeFieldNumber;
const int PauseDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PauseDeviceCommand::PauseDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PauseDeviceCommand)
}

void PauseDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PauseDeviceCommand::PauseDeviceCommand(const PauseDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.PauseDeviceCommand)
}

void PauseDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

PauseDeviceCommand::~PauseDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.PauseDeviceCommand)
  SharedDtor();
}

void PauseDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PauseDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PauseDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PauseDeviceCommand_descriptor_;
}

const PauseDeviceCommand& PauseDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

PauseDeviceCommand* PauseDeviceCommand::default_instance_ = NULL;

PauseDeviceCommand* PauseDeviceCommand::New(::google::protobuf::Arena* arena) const {
  PauseDeviceCommand* n = new PauseDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PauseDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PauseDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PauseDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PauseDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool PauseDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PauseDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PauseDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PauseDeviceCommand)
  return false;
#undef DO_
}

void PauseDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PauseDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PauseDeviceCommand)
}

::google::protobuf::uint8* PauseDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.PauseDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PauseDeviceCommand)
  return target;
}

int PauseDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PauseDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PauseDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PauseDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PauseDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PauseDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PauseDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PauseDeviceCommand)
    MergeFrom(*source);
  }
}

void PauseDeviceCommand::MergeFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PauseDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void PauseDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseDeviceCommand::CopyFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseDeviceCommand::IsInitialized() const {

  return true;
}

void PauseDeviceCommand::Swap(PauseDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PauseDeviceCommand::InternalSwap(PauseDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PauseDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PauseDeviceCommand_descriptor_;
  metadata.reflection = PauseDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PauseDeviceCommand

// optional .pas.Type type = 1;
void PauseDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type PauseDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void PauseDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.type)
}

// optional uint64 device_id = 2;
void PauseDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PauseDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.device_id)
  return device_id_;
}
 void PauseDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResumeDeviceCommand::kTypeFieldNumber;
const int ResumeDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResumeDeviceCommand::ResumeDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ResumeDeviceCommand)
}

void ResumeDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResumeDeviceCommand::ResumeDeviceCommand(const ResumeDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ResumeDeviceCommand)
}

void ResumeDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

ResumeDeviceCommand::~ResumeDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.ResumeDeviceCommand)
  SharedDtor();
}

void ResumeDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResumeDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResumeDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResumeDeviceCommand_descriptor_;
}

const ResumeDeviceCommand& ResumeDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ResumeDeviceCommand* ResumeDeviceCommand::default_instance_ = NULL;

ResumeDeviceCommand* ResumeDeviceCommand::New(::google::protobuf::Arena* arena) const {
  ResumeDeviceCommand* n = new ResumeDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResumeDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ResumeDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResumeDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResumeDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ResumeDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ResumeDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ResumeDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ResumeDeviceCommand)
  return false;
#undef DO_
}

void ResumeDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ResumeDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ResumeDeviceCommand)
}

::google::protobuf::uint8* ResumeDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ResumeDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ResumeDeviceCommand)
  return target;
}

int ResumeDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ResumeDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResumeDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ResumeDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResumeDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResumeDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ResumeDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ResumeDeviceCommand)
    MergeFrom(*source);
  }
}

void ResumeDeviceCommand::MergeFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ResumeDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void ResumeDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeDeviceCommand::CopyFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeDeviceCommand::IsInitialized() const {

  return true;
}

void ResumeDeviceCommand::Swap(ResumeDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResumeDeviceCommand::InternalSwap(ResumeDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResumeDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResumeDeviceCommand_descriptor_;
  metadata.reflection = ResumeDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResumeDeviceCommand

// optional .pas.Type type = 1;
void ResumeDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type ResumeDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void ResumeDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.type)
}

// optional uint64 device_id = 2;
void ResumeDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ResumeDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.device_id)
  return device_id_;
}
 void ResumeDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearDeviceCommand::kTypeFieldNumber;
const int ClearDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearDeviceCommand::ClearDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ClearDeviceCommand)
}

void ClearDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ClearDeviceCommand::ClearDeviceCommand(const ClearDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ClearDeviceCommand)
}

void ClearDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

ClearDeviceCommand::~ClearDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.ClearDeviceCommand)
  SharedDtor();
}

void ClearDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearDeviceCommand_descriptor_;
}

const ClearDeviceCommand& ClearDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ClearDeviceCommand* ClearDeviceCommand::default_instance_ = NULL;

ClearDeviceCommand* ClearDeviceCommand::New(::google::protobuf::Arena* arena) const {
  ClearDeviceCommand* n = new ClearDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ClearDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClearDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClearDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ClearDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ClearDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ClearDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ClearDeviceCommand)
  return false;
#undef DO_
}

void ClearDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ClearDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ClearDeviceCommand)
}

::google::protobuf::uint8* ClearDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ClearDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ClearDeviceCommand)
  return target;
}

int ClearDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ClearDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ClearDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ClearDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ClearDeviceCommand)
    MergeFrom(*source);
  }
}

void ClearDeviceCommand::MergeFrom(const ClearDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ClearDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void ClearDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ClearDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearDeviceCommand::CopyFrom(const ClearDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ClearDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearDeviceCommand::IsInitialized() const {

  return true;
}

void ClearDeviceCommand::Swap(ClearDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearDeviceCommand::InternalSwap(ClearDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearDeviceCommand_descriptor_;
  metadata.reflection = ClearDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearDeviceCommand

// optional .pas.Type type = 1;
void ClearDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type ClearDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.ClearDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void ClearDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ClearDeviceCommand.type)
}

// optional uint64 device_id = 2;
void ClearDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ClearDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ClearDeviceCommand.device_id)
  return device_id_;
}
 void ClearDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ClearDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopDeviceCommand::kTypeFieldNumber;
const int StopDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopDeviceCommand::StopDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.StopDeviceCommand)
}

void StopDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopDeviceCommand::StopDeviceCommand(const StopDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.StopDeviceCommand)
}

void StopDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

StopDeviceCommand::~StopDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.StopDeviceCommand)
  SharedDtor();
}

void StopDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopDeviceCommand_descriptor_;
}

const StopDeviceCommand& StopDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

StopDeviceCommand* StopDeviceCommand::default_instance_ = NULL;

StopDeviceCommand* StopDeviceCommand::New(::google::protobuf::Arena* arena) const {
  StopDeviceCommand* n = new StopDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.StopDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool StopDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.StopDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.StopDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.StopDeviceCommand)
  return false;
#undef DO_
}

void StopDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.StopDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.StopDeviceCommand)
}

::google::protobuf::uint8* StopDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.StopDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.StopDeviceCommand)
  return target;
}

int StopDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.StopDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.StopDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.StopDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.StopDeviceCommand)
    MergeFrom(*source);
  }
}

void StopDeviceCommand::MergeFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.StopDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void StopDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDeviceCommand::CopyFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDeviceCommand::IsInitialized() const {

  return true;
}

void StopDeviceCommand::Swap(StopDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopDeviceCommand::InternalSwap(StopDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopDeviceCommand_descriptor_;
  metadata.reflection = StopDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopDeviceCommand

// optional .pas.Type type = 1;
void StopDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type StopDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void StopDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.type)
}

// optional uint64 device_id = 2;
void StopDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StopDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.device_id)
  return device_id_;
}
 void StopDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhoDeviceCommand::kTypeFieldNumber;
const int WhoDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhoDeviceCommand::WhoDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhoDeviceCommand)
}

void WhoDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WhoDeviceCommand::WhoDeviceCommand(const WhoDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.WhoDeviceCommand)
}

void WhoDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

WhoDeviceCommand::~WhoDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhoDeviceCommand)
  SharedDtor();
}

void WhoDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhoDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhoDeviceCommand_descriptor_;
}

const WhoDeviceCommand& WhoDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

WhoDeviceCommand* WhoDeviceCommand::default_instance_ = NULL;

WhoDeviceCommand* WhoDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhoDeviceCommand* n = new WhoDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhoDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhoDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhoDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhoDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool WhoDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhoDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhoDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhoDeviceCommand)
  return false;
#undef DO_
}

void WhoDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhoDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhoDeviceCommand)
}

::google::protobuf::uint8* WhoDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhoDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhoDeviceCommand)
  return target;
}

int WhoDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhoDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhoDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhoDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhoDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhoDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhoDeviceCommand)
    MergeFrom(*source);
  }
}

void WhoDeviceCommand::MergeFrom(const WhoDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhoDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void WhoDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhoDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoDeviceCommand::CopyFrom(const WhoDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhoDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoDeviceCommand::IsInitialized() const {

  return true;
}

void WhoDeviceCommand::Swap(WhoDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhoDeviceCommand::InternalSwap(WhoDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhoDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhoDeviceCommand_descriptor_;
  metadata.reflection = WhoDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhoDeviceCommand

// optional .pas.Type type = 1;
void WhoDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type WhoDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhoDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void WhoDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhoDeviceCommand.type)
}

// optional uint64 device_id = 2;
void WhoDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 WhoDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhoDeviceCommand.device_id)
  return device_id_;
}
 void WhoDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhoDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhatDeviceCommand::kTypeFieldNumber;
const int WhatDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhatDeviceCommand::WhatDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhatDeviceCommand)
}

void WhatDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WhatDeviceCommand::WhatDeviceCommand(const WhatDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.WhatDeviceCommand)
}

void WhatDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

WhatDeviceCommand::~WhatDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhatDeviceCommand)
  SharedDtor();
}

void WhatDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhatDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhatDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhatDeviceCommand_descriptor_;
}

const WhatDeviceCommand& WhatDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

WhatDeviceCommand* WhatDeviceCommand::default_instance_ = NULL;

WhatDeviceCommand* WhatDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhatDeviceCommand* n = new WhatDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhatDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhatDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhatDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhatDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool WhatDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhatDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhatDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhatDeviceCommand)
  return false;
#undef DO_
}

void WhatDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhatDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhatDeviceCommand)
}

::google::protobuf::uint8* WhatDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhatDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhatDeviceCommand)
  return target;
}

int WhatDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhatDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhatDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhatDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhatDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhatDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhatDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhatDeviceCommand)
    MergeFrom(*source);
  }
}

void WhatDeviceCommand::MergeFrom(const WhatDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhatDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void WhatDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhatDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhatDeviceCommand::CopyFrom(const WhatDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhatDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhatDeviceCommand::IsInitialized() const {

  return true;
}

void WhatDeviceCommand::Swap(WhatDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhatDeviceCommand::InternalSwap(WhatDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhatDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhatDeviceCommand_descriptor_;
  metadata.reflection = WhatDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhatDeviceCommand

// optional .pas.Type type = 1;
void WhatDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type WhatDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhatDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void WhatDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhatDeviceCommand.type)
}

// optional uint64 device_id = 2;
void WhatDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 WhatDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhatDeviceCommand.device_id)
  return device_id_;
}
 void WhatDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhatDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackCountQuery::TrackCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TrackCountQuery)
}

void TrackCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackCountQuery::TrackCountQuery(const TrackCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.TrackCountQuery)
}

void TrackCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

TrackCountQuery::~TrackCountQuery() {
  // @@protoc_insertion_point(destructor:pas.TrackCountQuery)
  SharedDtor();
}

void TrackCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackCountQuery_descriptor_;
}

const TrackCountQuery& TrackCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

TrackCountQuery* TrackCountQuery::default_instance_ = NULL;

TrackCountQuery* TrackCountQuery::New(::google::protobuf::Arena* arena) const {
  TrackCountQuery* n = new TrackCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TrackCountQuery)
  type_ = 0;
}

bool TrackCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TrackCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TrackCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TrackCountQuery)
  return false;
#undef DO_
}

void TrackCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TrackCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TrackCountQuery)
}

::google::protobuf::uint8* TrackCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.TrackCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TrackCountQuery)
  return target;
}

int TrackCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TrackCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TrackCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TrackCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TrackCountQuery)
    MergeFrom(*source);
  }
}

void TrackCountQuery::MergeFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TrackCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrackCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackCountQuery::CopyFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackCountQuery::IsInitialized() const {

  return true;
}

void TrackCountQuery::Swap(TrackCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackCountQuery::InternalSwap(TrackCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackCountQuery_descriptor_;
  metadata.reflection = TrackCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackCountQuery

// optional .pas.Type type = 1;
void TrackCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type TrackCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.TrackCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void TrackCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtistCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtistCountQuery::ArtistCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ArtistCountQuery)
}

void ArtistCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArtistCountQuery::ArtistCountQuery(const ArtistCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ArtistCountQuery)
}

void ArtistCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

ArtistCountQuery::~ArtistCountQuery() {
  // @@protoc_insertion_point(destructor:pas.ArtistCountQuery)
  SharedDtor();
}

void ArtistCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtistCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtistCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtistCountQuery_descriptor_;
}

const ArtistCountQuery& ArtistCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ArtistCountQuery* ArtistCountQuery::default_instance_ = NULL;

ArtistCountQuery* ArtistCountQuery::New(::google::protobuf::Arena* arena) const {
  ArtistCountQuery* n = new ArtistCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArtistCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ArtistCountQuery)
  type_ = 0;
}

bool ArtistCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ArtistCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ArtistCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ArtistCountQuery)
  return false;
#undef DO_
}

void ArtistCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ArtistCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ArtistCountQuery)
}

::google::protobuf::uint8* ArtistCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ArtistCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ArtistCountQuery)
  return target;
}

int ArtistCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ArtistCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtistCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ArtistCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArtistCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArtistCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ArtistCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ArtistCountQuery)
    MergeFrom(*source);
  }
}

void ArtistCountQuery::MergeFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ArtistCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ArtistCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistCountQuery::CopyFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistCountQuery::IsInitialized() const {

  return true;
}

void ArtistCountQuery::Swap(ArtistCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtistCountQuery::InternalSwap(ArtistCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArtistCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtistCountQuery_descriptor_;
  metadata.reflection = ArtistCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArtistCountQuery

// optional .pas.Type type = 1;
void ArtistCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type ArtistCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.ArtistCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void ArtistCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ArtistCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FolderCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FolderCountQuery::FolderCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.FolderCountQuery)
}

void FolderCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FolderCountQuery::FolderCountQuery(const FolderCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.FolderCountQuery)
}

void FolderCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

FolderCountQuery::~FolderCountQuery() {
  // @@protoc_insertion_point(destructor:pas.FolderCountQuery)
  SharedDtor();
}

void FolderCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FolderCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolderCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FolderCountQuery_descriptor_;
}

const FolderCountQuery& FolderCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

FolderCountQuery* FolderCountQuery::default_instance_ = NULL;

FolderCountQuery* FolderCountQuery::New(::google::protobuf::Arena* arena) const {
  FolderCountQuery* n = new FolderCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FolderCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.FolderCountQuery)
  type_ = 0;
}

bool FolderCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.FolderCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.FolderCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.FolderCountQuery)
  return false;
#undef DO_
}

void FolderCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.FolderCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.FolderCountQuery)
}

::google::protobuf::uint8* FolderCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.FolderCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.FolderCountQuery)
  return target;
}

int FolderCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.FolderCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.FolderCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FolderCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FolderCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.FolderCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.FolderCountQuery)
    MergeFrom(*source);
  }
}

void FolderCountQuery::MergeFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.FolderCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FolderCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderCountQuery::CopyFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderCountQuery::IsInitialized() const {

  return true;
}

void FolderCountQuery::Swap(FolderCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FolderCountQuery::InternalSwap(FolderCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FolderCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FolderCountQuery_descriptor_;
  metadata.reflection = FolderCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FolderCountQuery

// optional .pas.Type type = 1;
void FolderCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type FolderCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.FolderCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void FolderCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.FolderCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectQuery::kTypeFieldNumber;
const int SelectQuery::kColumnFieldNumber;
const int SelectQuery::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectQuery::SelectQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.SelectQuery)
}

void SelectQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SelectQuery::SelectQuery(const SelectQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.SelectQuery)
}

void SelectQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SelectQuery::~SelectQuery() {
  // @@protoc_insertion_point(destructor:pas.SelectQuery)
  SharedDtor();
}

void SelectQuery::SharedDtor() {
  column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelectQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectQuery_descriptor_;
}

const SelectQuery& SelectQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

SelectQuery* SelectQuery::default_instance_ = NULL;

SelectQuery* SelectQuery::New(::google::protobuf::Arena* arena) const {
  SelectQuery* n = new SelectQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.SelectQuery)
  type_ = 0;
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SelectQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.SelectQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }

      // optional string column = 2;
      case 2: {
        if (tag == 18) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column().data(), this->column().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.column"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pattern;
        break;
      }

      // optional string pattern = 3;
      case 3: {
        if (tag == 26) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.pattern"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.SelectQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.SelectQuery)
  return false;
#undef DO_
}

void SelectQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.SelectQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->column(), output);
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pattern(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.SelectQuery)
}

::google::protobuf::uint8* SelectQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.SelectQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column(), target);
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pattern(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.SelectQuery)
  return target;
}

int SelectQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.SelectQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column());
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.SelectQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SelectQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.SelectQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.SelectQuery)
    MergeFrom(*source);
  }
}

void SelectQuery::MergeFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.SelectQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.column().size() > 0) {

    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
}

void SelectQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectQuery::CopyFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectQuery::IsInitialized() const {

  return true;
}

void SelectQuery::Swap(SelectQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectQuery::InternalSwap(SelectQuery* other) {
  std::swap(type_, other->type_);
  column_.Swap(&other->column_);
  pattern_.Swap(&other->pattern_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectQuery_descriptor_;
  metadata.reflection = SelectQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectQuery

// optional .pas.Type type = 1;
void SelectQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type SelectQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void SelectQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.SelectQuery.type)
}

// optional string column = 2;
void SelectQuery::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SelectQuery::column() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.column)
  return column_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_column(const ::std::string& value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.column)
}
 void SelectQuery::set_column(const char* value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.column)
}
 void SelectQuery::set_column(const char* value, size_t size) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.column)
}
 ::std::string* SelectQuery::mutable_column() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelectQuery::release_column() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.column)
  
  return column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    
  } else {
    
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.column)
}

// optional string pattern = 3;
void SelectQuery::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SelectQuery::pattern() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.pattern)
}
 void SelectQuery::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.pattern)
}
 void SelectQuery::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.pattern)
}
 ::std::string* SelectQuery::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelectQuery::release_pattern() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhenDeviceCommand::kTypeFieldNumber;
const int WhenDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhenDeviceCommand::WhenDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhenDeviceCommand)
}

void WhenDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WhenDeviceCommand::WhenDeviceCommand(const WhenDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.WhenDeviceCommand)
}

void WhenDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

WhenDeviceCommand::~WhenDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhenDeviceCommand)
  SharedDtor();
}

void WhenDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhenDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhenDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhenDeviceCommand_descriptor_;
}

const WhenDeviceCommand& WhenDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

WhenDeviceCommand* WhenDeviceCommand::default_instance_ = NULL;

WhenDeviceCommand* WhenDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhenDeviceCommand* n = new WhenDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhenDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhenDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhenDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhenDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool WhenDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhenDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhenDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhenDeviceCommand)
  return false;
#undef DO_
}

void WhenDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhenDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhenDeviceCommand)
}

::google::protobuf::uint8* WhenDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhenDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhenDeviceCommand)
  return target;
}

int WhenDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhenDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhenDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhenDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhenDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhenDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhenDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhenDeviceCommand)
    MergeFrom(*source);
  }
}

void WhenDeviceCommand::MergeFrom(const WhenDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhenDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void WhenDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhenDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhenDeviceCommand::CopyFrom(const WhenDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhenDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhenDeviceCommand::IsInitialized() const {

  return true;
}

void WhenDeviceCommand::Swap(WhenDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhenDeviceCommand::InternalSwap(WhenDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhenDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhenDeviceCommand_descriptor_;
  metadata.reflection = WhenDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhenDeviceCommand

// optional .pas.Type type = 1;
void WhenDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type WhenDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhenDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void WhenDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhenDeviceCommand.type)
}

// optional uint64 device_id = 2;
void WhenDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 WhenDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhenDeviceCommand.device_id)
  return device_id_;
}
 void WhenDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhenDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneInteger::kTypeFieldNumber;
const int OneInteger::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneInteger::OneInteger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneInteger)
}

void OneInteger::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OneInteger::OneInteger(const OneInteger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.OneInteger)
}

void OneInteger::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
}

OneInteger::~OneInteger() {
  // @@protoc_insertion_point(destructor:pas.OneInteger)
  SharedDtor();
}

void OneInteger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneInteger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneInteger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneInteger_descriptor_;
}

const OneInteger& OneInteger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

OneInteger* OneInteger::default_instance_ = NULL;

OneInteger* OneInteger::New(::google::protobuf::Arena* arena) const {
  OneInteger* n = new OneInteger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneInteger::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneInteger)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OneInteger, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OneInteger*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool OneInteger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneInteger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneInteger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneInteger)
  return false;
#undef DO_
}

void OneInteger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneInteger)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneInteger)
}

::google::protobuf::uint8* OneInteger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneInteger)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneInteger)
  return target;
}

int OneInteger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneInteger)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneInteger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneInteger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OneInteger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OneInteger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneInteger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneInteger)
    MergeFrom(*source);
  }
}

void OneInteger::MergeFrom(const OneInteger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneInteger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void OneInteger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneInteger::CopyFrom(const OneInteger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneInteger::IsInitialized() const {

  return true;
}

void OneInteger::Swap(OneInteger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneInteger::InternalSwap(OneInteger* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneInteger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneInteger_descriptor_;
  metadata.reflection = OneInteger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneInteger

// optional .pas.Type type = 1;
void OneInteger::clear_type() {
  type_ = 0;
}
 ::pas::Type OneInteger::type() const {
  // @@protoc_insertion_point(field_get:pas.OneInteger.type)
  return static_cast< ::pas::Type >(type_);
}
 void OneInteger::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneInteger.type)
}

// optional uint64 value = 2;
void OneInteger::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 OneInteger::value() const {
  // @@protoc_insertion_point(field_get:pas.OneInteger.value)
  return value_;
}
 void OneInteger::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pas.OneInteger.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneString::kTypeFieldNumber;
const int OneString::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneString::OneString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneString)
}

void OneString::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OneString::OneString(const OneString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.OneString)
}

void OneString::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OneString::~OneString() {
  // @@protoc_insertion_point(destructor:pas.OneString)
  SharedDtor();
}

void OneString::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OneString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneString_descriptor_;
}

const OneString& OneString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

OneString* OneString::default_instance_ = NULL;

OneString* OneString::New(::google::protobuf::Arena* arena) const {
  OneString* n = new OneString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneString::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneString)
  type_ = 0;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OneString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.OneString.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneString)
  return false;
#undef DO_
}

void OneString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneString)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.OneString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneString)
}

::google::protobuf::uint8* OneString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneString)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.OneString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneString)
  return target;
}

int OneString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneString)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OneString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OneString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneString)
    MergeFrom(*source);
  }
}

void OneString::MergeFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void OneString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneString::CopyFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneString::IsInitialized() const {

  return true;
}

void OneString::Swap(OneString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneString::InternalSwap(OneString* other) {
  std::swap(type_, other->type_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneString_descriptor_;
  metadata.reflection = OneString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneString

// optional .pas.Type type = 1;
void OneString::clear_type() {
  type_ = 0;
}
 ::pas::Type OneString::type() const {
  // @@protoc_insertion_point(field_get:pas.OneString.type)
  return static_cast< ::pas::Type >(type_);
}
 void OneString::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneString.type)
}

// optional string value = 2;
void OneString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OneString::value() const {
  // @@protoc_insertion_point(field_get:pas.OneString.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OneString::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.OneString.value)
}
 void OneString::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.OneString.value)
}
 void OneString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.OneString.value)
}
 ::std::string* OneString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pas.OneString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OneString::release_value() {
  // @@protoc_insertion_point(field_release:pas.OneString.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OneString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pas.OneString.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneFloat::kTypeFieldNumber;
const int OneFloat::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneFloat::OneFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneFloat)
}

void OneFloat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OneFloat::OneFloat(const OneFloat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.OneFloat)
}

void OneFloat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
}

OneFloat::~OneFloat() {
  // @@protoc_insertion_point(destructor:pas.OneFloat)
  SharedDtor();
}

void OneFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneFloat_descriptor_;
}

const OneFloat& OneFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

OneFloat* OneFloat::default_instance_ = NULL;

OneFloat* OneFloat::New(::google::protobuf::Arena* arena) const {
  OneFloat* n = new OneFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneFloat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OneFloat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OneFloat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool OneFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneFloat)
  return false;
#undef DO_
}

void OneFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneFloat)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneFloat)
}

::google::protobuf::uint8* OneFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneFloat)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneFloat)
  return target;
}

int OneFloat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneFloat)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneFloat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OneFloat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OneFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneFloat)
    MergeFrom(*source);
  }
}

void OneFloat::MergeFrom(const OneFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneFloat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void OneFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneFloat::CopyFrom(const OneFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFloat::IsInitialized() const {

  return true;
}

void OneFloat::Swap(OneFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneFloat::InternalSwap(OneFloat* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneFloat_descriptor_;
  metadata.reflection = OneFloat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneFloat

// optional .pas.Type type = 1;
void OneFloat::clear_type() {
  type_ = 0;
}
 ::pas::Type OneFloat::type() const {
  // @@protoc_insertion_point(field_get:pas.OneFloat.type)
  return static_cast< ::pas::Type >(type_);
}
 void OneFloat::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneFloat.type)
}

// optional float value = 2;
void OneFloat::clear_value() {
  value_ = 0;
}
 float OneFloat::value() const {
  // @@protoc_insertion_point(field_get:pas.OneFloat.value)
  return value_;
}
 void OneFloat::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pas.OneFloat.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pas

// @@protoc_insertion_point(global_scope)
