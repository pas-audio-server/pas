// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pas {
class GenericPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenericPB> {
} _GenericPB_default_instance_;
class OneIntegerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneInteger> {
} _OneInteger_default_instance_;
class OneStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneString> {
} _OneString_default_instance_;
class OneFloatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneFloat> {
} _OneFloat_default_instance_;
class TwoIntegersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwoIntegers> {
} _TwoIntegers_default_instance_;
class TwoStringsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwoStrings> {
} _TwoStrings_default_instance_;
class RowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Row> {
} _Row_default_instance_;
class SelectResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectResult> {
} _SelectResult_default_instance_;
class DacInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DacInfo> {
} _DacInfo_default_instance_;
class PlayTrackCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayTrackCommand> {
} _PlayTrackCommand_default_instance_;
class PauseDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PauseDeviceCommand> {
} _PauseDeviceCommand_default_instance_;
class ResumeDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResumeDeviceCommand> {
} _ResumeDeviceCommand_default_instance_;
class ClearDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClearDeviceCommand> {
} _ClearDeviceCommand_default_instance_;
class StopDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopDeviceCommand> {
} _StopDeviceCommand_default_instance_;
class WhoDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WhoDeviceCommand> {
} _WhoDeviceCommand_default_instance_;
class WhatDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WhatDeviceCommand> {
} _WhatDeviceCommand_default_instance_;
class TrackCountQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrackCountQuery> {
} _TrackCountQuery_default_instance_;
class ArtistCountQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ArtistCountQuery> {
} _ArtistCountQuery_default_instance_;
class FolderCountQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FolderCountQuery> {
} _FolderCountQuery_default_instance_;
class SelectQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectQuery> {
} _SelectQuery_default_instance_;
class WhenDeviceCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WhenDeviceCommand> {
} _WhenDeviceCommand_default_instance_;

namespace protobuf_commands_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneInteger, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneString, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneFloat, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoIntegers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoIntegers, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoIntegers, value_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoIntegers, value_b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoStrings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoStrings, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoStrings, column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoStrings, pattern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Row, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectResult, row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DacInfo, row_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, track_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhatDeviceCommand, device_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, pattern_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhenDeviceCommand, device_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GenericPB)},
  { 5, -1, sizeof(OneInteger)},
  { 11, -1, sizeof(OneString)},
  { 17, -1, sizeof(OneFloat)},
  { 23, -1, sizeof(TwoIntegers)},
  { 30, -1, sizeof(TwoStrings)},
  { 37, -1, sizeof(Row)},
  { 43, -1, sizeof(SelectResult)},
  { 49, -1, sizeof(DacInfo)},
  { 55, -1, sizeof(PlayTrackCommand)},
  { 62, -1, sizeof(PauseDeviceCommand)},
  { 68, -1, sizeof(ResumeDeviceCommand)},
  { 74, -1, sizeof(ClearDeviceCommand)},
  { 80, -1, sizeof(StopDeviceCommand)},
  { 86, -1, sizeof(WhoDeviceCommand)},
  { 92, -1, sizeof(WhatDeviceCommand)},
  { 98, -1, sizeof(TrackCountQuery)},
  { 103, -1, sizeof(ArtistCountQuery)},
  { 108, -1, sizeof(FolderCountQuery)},
  { 113, -1, sizeof(SelectQuery)},
  { 120, -1, sizeof(WhenDeviceCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenericPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneInteger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OneFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwoIntegers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwoStrings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DacInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayTrackCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PauseDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResumeDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClearDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhoDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhatDeviceCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrackCountQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ArtistCountQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FolderCountQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WhenDeviceCommand_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "commands.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
  const ::google::protobuf::Descriptor* Row_ResultsEntry_descriptor = protobuf_commands_2eproto::file_level_metadata[6].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Row_ResultsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Row_ResultsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _GenericPB_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OneInteger_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _OneString_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _OneFloat_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TwoIntegers_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TwoStrings_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Row_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SelectResult_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _DacInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PlayTrackCommand_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PauseDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ResumeDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ClearDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StopDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _WhoDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _WhatDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _TrackCountQuery_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ArtistCountQuery_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _FolderCountQuery_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SelectQuery_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _WhenDeviceCommand_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GenericPB_default_instance_.DefaultConstruct();
  _OneInteger_default_instance_.DefaultConstruct();
  _OneString_default_instance_.DefaultConstruct();
  _OneFloat_default_instance_.DefaultConstruct();
  _TwoIntegers_default_instance_.DefaultConstruct();
  _TwoStrings_default_instance_.DefaultConstruct();
  _Row_default_instance_.DefaultConstruct();
  _SelectResult_default_instance_.DefaultConstruct();
  _DacInfo_default_instance_.DefaultConstruct();
  _PlayTrackCommand_default_instance_.DefaultConstruct();
  _PauseDeviceCommand_default_instance_.DefaultConstruct();
  _ResumeDeviceCommand_default_instance_.DefaultConstruct();
  _ClearDeviceCommand_default_instance_.DefaultConstruct();
  _StopDeviceCommand_default_instance_.DefaultConstruct();
  _WhoDeviceCommand_default_instance_.DefaultConstruct();
  _WhatDeviceCommand_default_instance_.DefaultConstruct();
  _TrackCountQuery_default_instance_.DefaultConstruct();
  _ArtistCountQuery_default_instance_.DefaultConstruct();
  _FolderCountQuery_default_instance_.DefaultConstruct();
  _SelectQuery_default_instance_.DefaultConstruct();
  _WhenDeviceCommand_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016commands.proto\022\003pas\"$\n\tGenericPB\022\027\n\004ty"
      "pe\030\001 \001(\0162\t.pas.Type\"4\n\nOneInteger\022\027\n\004typ"
      "e\030\001 \001(\0162\t.pas.Type\022\r\n\005value\030\002 \001(\004\"3\n\tOne"
      "String\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\r\n\005value"
      "\030\002 \001(\t\"2\n\010OneFloat\022\027\n\004type\030\001 \001(\0162\t.pas.T"
      "ype\022\r\n\005value\030\002 \001(\002\"H\n\013TwoIntegers\022\027\n\004typ"
      "e\030\001 \001(\0162\t.pas.Type\022\017\n\007value_a\030\002 \001(\004\022\017\n\007v"
      "alue_b\030\003 \001(\004\"F\n\nTwoStrings\022\027\n\004type\030\001 \001(\016"
      "2\t.pas.Type\022\016\n\006column\030\002 \001(\t\022\017\n\007pattern\030\003"
      " \001(\t\"v\n\003Row\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022&\n\007"
      "results\030\002 \003(\0132\025.pas.Row.ResultsEntry\032.\n\014"
      "ResultsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
      ":\0028\001\">\n\014SelectResult\022\027\n\004type\030\001 \001(\0162\t.pas"
      ".Type\022\025\n\003row\030\002 \003(\0132\010.pas.Row\"9\n\007DacInfo\022"
      "\027\n\004type\030\001 \001(\0162\t.pas.Type\022\025\n\003row\030\002 \003(\0132\010."
      "pas.Row\"P\n\020PlayTrackCommand\022\027\n\004type\030\001 \001("
      "\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\022\020\n\010track"
      "_id\030\003 \001(\004\"@\n\022PauseDeviceCommand\022\027\n\004type\030"
      "\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\"A\n\023R"
      "esumeDeviceCommand\022\027\n\004type\030\001 \001(\0162\t.pas.T"
      "ype\022\021\n\tdevice_id\030\002 \001(\004\"@\n\022ClearDeviceCom"
      "mand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_"
      "id\030\002 \001(\004\"\?\n\021StopDeviceCommand\022\027\n\004type\030\001 "
      "\001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\">\n\020Who"
      "DeviceCommand\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021"
      "\n\tdevice_id\030\002 \001(\004\"\?\n\021WhatDeviceCommand\022\027"
      "\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001"
      "(\004\"*\n\017TrackCountQuery\022\027\n\004type\030\001 \001(\0162\t.pa"
      "s.Type\"+\n\020ArtistCountQuery\022\027\n\004type\030\001 \001(\016"
      "2\t.pas.Type\"+\n\020FolderCountQuery\022\027\n\004type\030"
      "\001 \001(\0162\t.pas.Type\"G\n\013SelectQuery\022\027\n\004type\030"
      "\001 \001(\0162\t.pas.Type\022\016\n\006column\030\002 \001(\t\022\017\n\007patt"
      "ern\030\003 \001(\t\"\?\n\021WhenDeviceCommand\022\027\n\004type\030\001"
      " \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004*g\n\010Lo"
      "gLevel\022\t\n\005FATAL\020\000\022\013\n\007MINIMAL\020\001\022\022\n\016CONVER"
      "SATIONAL\020\002\022\013\n\007VERBOSE\020\003\022\016\n\nREDICULOUS\020\004\022"
      "\016\n\nRIDICULOUS\020\004\032\002\020\001*\371\003\n\004Type\022\013\n\007GENERIC\020"
      "\000\022\025\n\021PLAY_TRACK_DEVICE\020\001\022\020\n\014PAUSE_DEVICE"
      "\020\002\022\021\n\rRESUME_DEVICE\020\003\022\017\n\013STOP_DEVICE\020\004\022\016"
      "\n\nWHO_DEVICE\020\005\022\017\n\013WHAT_DEVICE\020\006\022\017\n\013TRACK"
      "_COUNT\020\007\022\020\n\014ARTIST_COUNT\020\010\022\020\n\014FOLDER_COU"
      "NT\020\t\022\020\n\014SELECT_QUERY\020\n\022\017\n\013RESERVED_01\020\013\022"
      "\017\n\013WHEN_DEVICE\020\014\022\020\n\014CLEAR_DEVICE\020\r\022\021\n\rSE"
      "LECT_RESULT\020\016\022\007\n\003ROW\020\017\022\013\n\007ONE_INT\020\020\022\016\n\nO"
      "NE_STRING\020\021\022\r\n\tONE_FLOAT\020\022\022\024\n\020DAC_INFO_C"
      "OMMAND\020\023\022\017\n\013NEXT_DEVICE\020\024\022\016\n\nCOPY_QUEUE\020"
      "\025\022\016\n\nMOVE_QUEUE\020\026\022\020\n\014APPEND_QUEUE\020\027\022\r\n\tL"
      "OG_LEVEL\020\030\022\023\n\017LOG_LEVEL_QUERY\020\031\022\020\n\014TWO_I"
      "NTEGERS\020\032\022\017\n\013TWO_STRINGS\020\033\022\023\n\017UNKNOWN_ME"
      "SSAGE\020\034b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commands.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_commands_2eproto

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_enum_descriptors[0];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_enum_descriptors[1];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericPB::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericPB::GenericPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.GenericPB)
}
GenericPB::GenericPB(const GenericPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.GenericPB)
}

void GenericPB::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

GenericPB::~GenericPB() {
  // @@protoc_insertion_point(destructor:pas.GenericPB)
  SharedDtor();
}

void GenericPB::SharedDtor() {
}

void GenericPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericPB::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[0].descriptor;
}

const GenericPB& GenericPB::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenericPB* GenericPB::New(::google::protobuf::Arena* arena) const {
  GenericPB* n = new GenericPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericPB::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.GenericPB)
  type_ = 0;
}

bool GenericPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.GenericPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.GenericPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.GenericPB)
  return false;
#undef DO_
}

void GenericPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.GenericPB)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.GenericPB)
}

::google::protobuf::uint8* GenericPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.GenericPB)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.GenericPB)
  return target;
}

size_t GenericPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.GenericPB)
  size_t total_size = 0;

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.GenericPB)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.GenericPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.GenericPB)
    MergeFrom(*source);
  }
}

void GenericPB::MergeFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.GenericPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GenericPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericPB::CopyFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPB::IsInitialized() const {
  return true;
}

void GenericPB::Swap(GenericPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericPB::InternalSwap(GenericPB* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericPB::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericPB

// .pas.Type type = 1;
void GenericPB::clear_type() {
  type_ = 0;
}
::pas::Type GenericPB::type() const {
  // @@protoc_insertion_point(field_get:pas.GenericPB.type)
  return static_cast< ::pas::Type >(type_);
}
void GenericPB::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.GenericPB.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneInteger::kTypeFieldNumber;
const int OneInteger::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneInteger::OneInteger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneInteger)
}
OneInteger::OneInteger(const OneInteger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.OneInteger)
}

void OneInteger::SharedCtor() {
  ::memset(&value_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_) + sizeof(type_));
  _cached_size_ = 0;
}

OneInteger::~OneInteger() {
  // @@protoc_insertion_point(destructor:pas.OneInteger)
  SharedDtor();
}

void OneInteger::SharedDtor() {
}

void OneInteger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneInteger::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[1].descriptor;
}

const OneInteger& OneInteger::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneInteger* OneInteger::New(::google::protobuf::Arena* arena) const {
  OneInteger* n = new OneInteger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneInteger::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneInteger)
  ::memset(&value_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_) + sizeof(type_));
}

bool OneInteger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneInteger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneInteger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneInteger)
  return false;
#undef DO_
}

void OneInteger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneInteger)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneInteger)
}

::google::protobuf::uint8* OneInteger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneInteger)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneInteger)
  return target;
}

size_t OneInteger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneInteger)
  size_t total_size = 0;

  // uint64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneInteger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneInteger)
  GOOGLE_DCHECK_NE(&from, this);
  const OneInteger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneInteger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneInteger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneInteger)
    MergeFrom(*source);
  }
}

void OneInteger::MergeFrom(const OneInteger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneInteger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OneInteger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneInteger::CopyFrom(const OneInteger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneInteger::IsInitialized() const {
  return true;
}

void OneInteger::Swap(OneInteger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneInteger::InternalSwap(OneInteger* other) {
  std::swap(value_, other->value_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneInteger::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneInteger

// .pas.Type type = 1;
void OneInteger::clear_type() {
  type_ = 0;
}
::pas::Type OneInteger::type() const {
  // @@protoc_insertion_point(field_get:pas.OneInteger.type)
  return static_cast< ::pas::Type >(type_);
}
void OneInteger::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneInteger.type)
}

// uint64 value = 2;
void OneInteger::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 OneInteger::value() const {
  // @@protoc_insertion_point(field_get:pas.OneInteger.value)
  return value_;
}
void OneInteger::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pas.OneInteger.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneString::kTypeFieldNumber;
const int OneString::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneString::OneString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneString)
}
OneString::OneString(const OneString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.OneString)
}

void OneString::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

OneString::~OneString() {
  // @@protoc_insertion_point(destructor:pas.OneString)
  SharedDtor();
}

void OneString::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OneString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneString::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[2].descriptor;
}

const OneString& OneString::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneString* OneString::New(::google::protobuf::Arena* arena) const {
  OneString* n = new OneString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneString::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneString)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool OneString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.OneString.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneString)
  return false;
#undef DO_
}

void OneString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneString)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.OneString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneString)
}

::google::protobuf::uint8* OneString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneString)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.OneString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneString)
  return target;
}

size_t OneString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneString)
  size_t total_size = 0;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneString)
  GOOGLE_DCHECK_NE(&from, this);
  const OneString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneString)
    MergeFrom(*source);
  }
}

void OneString::MergeFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void OneString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneString::CopyFrom(const OneString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneString::IsInitialized() const {
  return true;
}

void OneString::Swap(OneString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneString::InternalSwap(OneString* other) {
  value_.Swap(&other->value_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneString::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneString

// .pas.Type type = 1;
void OneString::clear_type() {
  type_ = 0;
}
::pas::Type OneString::type() const {
  // @@protoc_insertion_point(field_get:pas.OneString.type)
  return static_cast< ::pas::Type >(type_);
}
void OneString::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneString.type)
}

// string value = 2;
void OneString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OneString::value() const {
  // @@protoc_insertion_point(field_get:pas.OneString.value)
  return value_.GetNoArena();
}
void OneString::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.OneString.value)
}
#if LANG_CXX11
void OneString::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pas.OneString.value)
}
#endif
void OneString::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.OneString.value)
}
void OneString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.OneString.value)
}
::std::string* OneString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pas.OneString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OneString::release_value() {
  // @@protoc_insertion_point(field_release:pas.OneString.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OneString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pas.OneString.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneFloat::kTypeFieldNumber;
const int OneFloat::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneFloat::OneFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.OneFloat)
}
OneFloat::OneFloat(const OneFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:pas.OneFloat)
}

void OneFloat::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
  _cached_size_ = 0;
}

OneFloat::~OneFloat() {
  // @@protoc_insertion_point(destructor:pas.OneFloat)
  SharedDtor();
}

void OneFloat::SharedDtor() {
}

void OneFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneFloat::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[3].descriptor;
}

const OneFloat& OneFloat::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneFloat* OneFloat::New(::google::protobuf::Arena* arena) const {
  OneFloat* n = new OneFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.OneFloat)
  ::memset(&type_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_) + sizeof(value_));
}

bool OneFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.OneFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.OneFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.OneFloat)
  return false;
#undef DO_
}

void OneFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.OneFloat)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.OneFloat)
}

::google::protobuf::uint8* OneFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.OneFloat)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.OneFloat)
  return target;
}

size_t OneFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.OneFloat)
  size_t total_size = 0;

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.OneFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const OneFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OneFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.OneFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.OneFloat)
    MergeFrom(*source);
  }
}

void OneFloat::MergeFrom(const OneFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.OneFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void OneFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.OneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneFloat::CopyFrom(const OneFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.OneFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneFloat::IsInitialized() const {
  return true;
}

void OneFloat::Swap(OneFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneFloat::InternalSwap(OneFloat* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OneFloat::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneFloat

// .pas.Type type = 1;
void OneFloat::clear_type() {
  type_ = 0;
}
::pas::Type OneFloat::type() const {
  // @@protoc_insertion_point(field_get:pas.OneFloat.type)
  return static_cast< ::pas::Type >(type_);
}
void OneFloat::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.OneFloat.type)
}

// float value = 2;
void OneFloat::clear_value() {
  value_ = 0;
}
float OneFloat::value() const {
  // @@protoc_insertion_point(field_get:pas.OneFloat.value)
  return value_;
}
void OneFloat::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pas.OneFloat.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoIntegers::kTypeFieldNumber;
const int TwoIntegers::kValueAFieldNumber;
const int TwoIntegers::kValueBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoIntegers::TwoIntegers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TwoIntegers)
}
TwoIntegers::TwoIntegers(const TwoIntegers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_a_, &from.value_a_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_a_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.TwoIntegers)
}

void TwoIntegers::SharedCtor() {
  ::memset(&value_a_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_a_) + sizeof(type_));
  _cached_size_ = 0;
}

TwoIntegers::~TwoIntegers() {
  // @@protoc_insertion_point(destructor:pas.TwoIntegers)
  SharedDtor();
}

void TwoIntegers::SharedDtor() {
}

void TwoIntegers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoIntegers::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[4].descriptor;
}

const TwoIntegers& TwoIntegers::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwoIntegers* TwoIntegers::New(::google::protobuf::Arena* arena) const {
  TwoIntegers* n = new TwoIntegers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwoIntegers::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TwoIntegers)
  ::memset(&value_a_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_a_) + sizeof(type_));
}

bool TwoIntegers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TwoIntegers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 value_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TwoIntegers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TwoIntegers)
  return false;
#undef DO_
}

void TwoIntegers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TwoIntegers)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 value_a = 2;
  if (this->value_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value_a(), output);
  }

  // uint64 value_b = 3;
  if (this->value_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value_b(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TwoIntegers)
}

::google::protobuf::uint8* TwoIntegers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.TwoIntegers)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 value_a = 2;
  if (this->value_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value_a(), target);
  }

  // uint64 value_b = 3;
  if (this->value_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value_b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TwoIntegers)
  return target;
}

size_t TwoIntegers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TwoIntegers)
  size_t total_size = 0;

  // uint64 value_a = 2;
  if (this->value_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value_a());
  }

  // uint64 value_b = 3;
  if (this->value_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value_b());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoIntegers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TwoIntegers)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoIntegers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwoIntegers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TwoIntegers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TwoIntegers)
    MergeFrom(*source);
  }
}

void TwoIntegers::MergeFrom(const TwoIntegers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TwoIntegers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value_a() != 0) {
    set_value_a(from.value_a());
  }
  if (from.value_b() != 0) {
    set_value_b(from.value_b());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TwoIntegers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TwoIntegers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoIntegers::CopyFrom(const TwoIntegers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TwoIntegers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoIntegers::IsInitialized() const {
  return true;
}

void TwoIntegers::Swap(TwoIntegers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoIntegers::InternalSwap(TwoIntegers* other) {
  std::swap(value_a_, other->value_a_);
  std::swap(value_b_, other->value_b_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwoIntegers::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwoIntegers

// .pas.Type type = 1;
void TwoIntegers::clear_type() {
  type_ = 0;
}
::pas::Type TwoIntegers::type() const {
  // @@protoc_insertion_point(field_get:pas.TwoIntegers.type)
  return static_cast< ::pas::Type >(type_);
}
void TwoIntegers::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TwoIntegers.type)
}

// uint64 value_a = 2;
void TwoIntegers::clear_value_a() {
  value_a_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TwoIntegers::value_a() const {
  // @@protoc_insertion_point(field_get:pas.TwoIntegers.value_a)
  return value_a_;
}
void TwoIntegers::set_value_a(::google::protobuf::uint64 value) {
  
  value_a_ = value;
  // @@protoc_insertion_point(field_set:pas.TwoIntegers.value_a)
}

// uint64 value_b = 3;
void TwoIntegers::clear_value_b() {
  value_b_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TwoIntegers::value_b() const {
  // @@protoc_insertion_point(field_get:pas.TwoIntegers.value_b)
  return value_b_;
}
void TwoIntegers::set_value_b(::google::protobuf::uint64 value) {
  
  value_b_ = value;
  // @@protoc_insertion_point(field_set:pas.TwoIntegers.value_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoStrings::kTypeFieldNumber;
const int TwoStrings::kColumnFieldNumber;
const int TwoStrings::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoStrings::TwoStrings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TwoStrings)
}
TwoStrings::TwoStrings(const TwoStrings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.column().size() > 0) {
    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.TwoStrings)
}

void TwoStrings::SharedCtor() {
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

TwoStrings::~TwoStrings() {
  // @@protoc_insertion_point(destructor:pas.TwoStrings)
  SharedDtor();
}

void TwoStrings::SharedDtor() {
  column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TwoStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoStrings::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[5].descriptor;
}

const TwoStrings& TwoStrings::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwoStrings* TwoStrings::New(::google::protobuf::Arena* arena) const {
  TwoStrings* n = new TwoStrings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwoStrings::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TwoStrings)
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool TwoStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TwoStrings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column().data(), this->column().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.TwoStrings.column"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pattern = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.TwoStrings.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TwoStrings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TwoStrings)
  return false;
#undef DO_
}

void TwoStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TwoStrings)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.TwoStrings.column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->column(), output);
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.TwoStrings.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pattern(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TwoStrings)
}

::google::protobuf::uint8* TwoStrings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.TwoStrings)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.TwoStrings.column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column(), target);
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.TwoStrings.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pattern(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TwoStrings)
  return target;
}

size_t TwoStrings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TwoStrings)
  size_t total_size = 0;

  // string column = 2;
  if (this->column().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column());
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoStrings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TwoStrings)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoStrings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwoStrings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TwoStrings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TwoStrings)
    MergeFrom(*source);
  }
}

void TwoStrings::MergeFrom(const TwoStrings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TwoStrings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.column().size() > 0) {

    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TwoStrings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TwoStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoStrings::CopyFrom(const TwoStrings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TwoStrings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoStrings::IsInitialized() const {
  return true;
}

void TwoStrings::Swap(TwoStrings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoStrings::InternalSwap(TwoStrings* other) {
  column_.Swap(&other->column_);
  pattern_.Swap(&other->pattern_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwoStrings::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwoStrings

// .pas.Type type = 1;
void TwoStrings::clear_type() {
  type_ = 0;
}
::pas::Type TwoStrings::type() const {
  // @@protoc_insertion_point(field_get:pas.TwoStrings.type)
  return static_cast< ::pas::Type >(type_);
}
void TwoStrings::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TwoStrings.type)
}

// string column = 2;
void TwoStrings::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TwoStrings::column() const {
  // @@protoc_insertion_point(field_get:pas.TwoStrings.column)
  return column_.GetNoArena();
}
void TwoStrings::set_column(const ::std::string& value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.TwoStrings.column)
}
#if LANG_CXX11
void TwoStrings::set_column(::std::string&& value) {
  
  column_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pas.TwoStrings.column)
}
#endif
void TwoStrings::set_column(const char* value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.TwoStrings.column)
}
void TwoStrings::set_column(const char* value, size_t size) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.TwoStrings.column)
}
::std::string* TwoStrings::mutable_column() {
  
  // @@protoc_insertion_point(field_mutable:pas.TwoStrings.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TwoStrings::release_column() {
  // @@protoc_insertion_point(field_release:pas.TwoStrings.column)
  
  return column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TwoStrings::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    
  } else {
    
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:pas.TwoStrings.column)
}

// string pattern = 3;
void TwoStrings::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TwoStrings::pattern() const {
  // @@protoc_insertion_point(field_get:pas.TwoStrings.pattern)
  return pattern_.GetNoArena();
}
void TwoStrings::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.TwoStrings.pattern)
}
#if LANG_CXX11
void TwoStrings::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pas.TwoStrings.pattern)
}
#endif
void TwoStrings::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.TwoStrings.pattern)
}
void TwoStrings::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.TwoStrings.pattern)
}
::std::string* TwoStrings::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:pas.TwoStrings.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TwoStrings::release_pattern() {
  // @@protoc_insertion_point(field_release:pas.TwoStrings.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TwoStrings::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:pas.TwoStrings.pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kTypeFieldNumber;
const int Row::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Row_ResultsEntry_descriptor = protobuf_commands_2eproto::file_level_metadata[6].descriptor;
  results_.SetAssignDescriptorCallback(
      protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce);
  results_.SetEntryDescriptor(
      &Row_ResultsEntry_descriptor);
  results_.MergeFrom(from.results_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.Row)
}

void Row::SharedCtor() {
  const ::google::protobuf::Descriptor*& Row_ResultsEntry_descriptor = protobuf_commands_2eproto::file_level_metadata[6].descriptor;
  results_.SetAssignDescriptorCallback(
      protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce);
  results_.SetEntryDescriptor(
      &Row_ResultsEntry_descriptor);
  type_ = 0;
  _cached_size_ = 0;
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:pas.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[7].descriptor;
}

const Row& Row::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

Row* Row::New(::google::protobuf::Arena* arena) const {
  Row* n = new Row;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.Row)
  results_.Clear();
  type_ = 0;
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.Row)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          Row_ResultsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&results_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.Row.ResultsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.Row.ResultsEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.Row)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // map<string, string> results = 2;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:pas.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.Row)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // map<string, string> results = 2;
  if (!this->results().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "pas.Row.ResultsEntry.value");
      }
    };

    if (deterministic &&
        this->results().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->results().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(results_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->results().begin();
          it != this->results().end(); ++it) {
        entry.reset(results_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.Row)
  size_t total_size = 0;

  // map<string, string> results = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->results_size());
  {
    ::google::protobuf::scoped_ptr<Row_ResultsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->results().begin();
        it != this->results().end(); ++it) {
      entry.reset(results_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  results_.MergeFrom(from.results_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  results_.Swap(&other->results_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Row

// .pas.Type type = 1;
void Row::clear_type() {
  type_ = 0;
}
::pas::Type Row::type() const {
  // @@protoc_insertion_point(field_get:pas.Row.type)
  return static_cast< ::pas::Type >(type_);
}
void Row::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.Row.type)
}

// map<string, string> results = 2;
int Row::results_size() const {
  return results_.size();
}
void Row::clear_results() {
  results_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Row::results() const {
  // @@protoc_insertion_point(field_map:pas.Row.results)
  return results_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Row::mutable_results() {
  // @@protoc_insertion_point(field_mutable_map:pas.Row.results)
  return results_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectResult::kTypeFieldNumber;
const int SelectResult::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectResult::SelectResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.SelectResult)
}
SelectResult::SelectResult(const SelectResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      row_(from.row_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.SelectResult)
}

void SelectResult::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

SelectResult::~SelectResult() {
  // @@protoc_insertion_point(destructor:pas.SelectResult)
  SharedDtor();
}

void SelectResult::SharedDtor() {
}

void SelectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectResult::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[8].descriptor;
}

const SelectResult& SelectResult::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectResult* SelectResult::New(::google::protobuf::Arena* arena) const {
  SelectResult* n = new SelectResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.SelectResult)
  row_.Clear();
  type_ = 0;
}

bool SelectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.SelectResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pas.Row row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.SelectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.SelectResult)
  return false;
#undef DO_
}

void SelectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.SelectResult)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.SelectResult)
}

::google::protobuf::uint8* SelectResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.SelectResult)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.SelectResult)
  return target;
}

size_t SelectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.SelectResult)
  size_t total_size = 0;

  // repeated .pas.Row row = 2;
  {
    unsigned int count = this->row_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row(i));
    }
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.SelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.SelectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.SelectResult)
    MergeFrom(*source);
  }
}

void SelectResult::MergeFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.SelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.MergeFrom(from.row_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SelectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.SelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectResult::CopyFrom(const SelectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.SelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectResult::IsInitialized() const {
  return true;
}

void SelectResult::Swap(SelectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectResult::InternalSwap(SelectResult* other) {
  row_.UnsafeArenaSwap(&other->row_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectResult::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectResult

// .pas.Type type = 1;
void SelectResult::clear_type() {
  type_ = 0;
}
::pas::Type SelectResult::type() const {
  // @@protoc_insertion_point(field_get:pas.SelectResult.type)
  return static_cast< ::pas::Type >(type_);
}
void SelectResult::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.SelectResult.type)
}

// repeated .pas.Row row = 2;
int SelectResult::row_size() const {
  return row_.size();
}
void SelectResult::clear_row() {
  row_.Clear();
}
const ::pas::Row& SelectResult::row(int index) const {
  // @@protoc_insertion_point(field_get:pas.SelectResult.row)
  return row_.Get(index);
}
::pas::Row* SelectResult::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:pas.SelectResult.row)
  return row_.Mutable(index);
}
::pas::Row* SelectResult::add_row() {
  // @@protoc_insertion_point(field_add:pas.SelectResult.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::pas::Row >*
SelectResult::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:pas.SelectResult.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::pas::Row >&
SelectResult::row() const {
  // @@protoc_insertion_point(field_list:pas.SelectResult.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DacInfo::kTypeFieldNumber;
const int DacInfo::kRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DacInfo::DacInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.DacInfo)
}
DacInfo::DacInfo(const DacInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      row_(from.row_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.DacInfo)
}

void DacInfo::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

DacInfo::~DacInfo() {
  // @@protoc_insertion_point(destructor:pas.DacInfo)
  SharedDtor();
}

void DacInfo::SharedDtor() {
}

void DacInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DacInfo::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[9].descriptor;
}

const DacInfo& DacInfo::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

DacInfo* DacInfo::New(::google::protobuf::Arena* arena) const {
  DacInfo* n = new DacInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DacInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.DacInfo)
  row_.Clear();
  type_ = 0;
}

bool DacInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.DacInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pas.Row row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.DacInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.DacInfo)
  return false;
#undef DO_
}

void DacInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.DacInfo)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.DacInfo)
}

::google::protobuf::uint8* DacInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.DacInfo)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pas.Row row = 2;
  for (unsigned int i = 0, n = this->row_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.DacInfo)
  return target;
}

size_t DacInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.DacInfo)
  size_t total_size = 0;

  // repeated .pas.Row row = 2;
  {
    unsigned int count = this->row_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row(i));
    }
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DacInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.DacInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DacInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DacInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.DacInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.DacInfo)
    MergeFrom(*source);
  }
}

void DacInfo::MergeFrom(const DacInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.DacInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_.MergeFrom(from.row_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DacInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.DacInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DacInfo::CopyFrom(const DacInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.DacInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DacInfo::IsInitialized() const {
  return true;
}

void DacInfo::Swap(DacInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DacInfo::InternalSwap(DacInfo* other) {
  row_.UnsafeArenaSwap(&other->row_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DacInfo::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DacInfo

// .pas.Type type = 1;
void DacInfo::clear_type() {
  type_ = 0;
}
::pas::Type DacInfo::type() const {
  // @@protoc_insertion_point(field_get:pas.DacInfo.type)
  return static_cast< ::pas::Type >(type_);
}
void DacInfo::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.DacInfo.type)
}

// repeated .pas.Row row = 2;
int DacInfo::row_size() const {
  return row_.size();
}
void DacInfo::clear_row() {
  row_.Clear();
}
const ::pas::Row& DacInfo::row(int index) const {
  // @@protoc_insertion_point(field_get:pas.DacInfo.row)
  return row_.Get(index);
}
::pas::Row* DacInfo::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:pas.DacInfo.row)
  return row_.Mutable(index);
}
::pas::Row* DacInfo::add_row() {
  // @@protoc_insertion_point(field_add:pas.DacInfo.row)
  return row_.Add();
}
::google::protobuf::RepeatedPtrField< ::pas::Row >*
DacInfo::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:pas.DacInfo.row)
  return &row_;
}
const ::google::protobuf::RepeatedPtrField< ::pas::Row >&
DacInfo::row() const {
  // @@protoc_insertion_point(field_list:pas.DacInfo.row)
  return row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayTrackCommand::kTypeFieldNumber;
const int PlayTrackCommand::kDeviceIdFieldNumber;
const int PlayTrackCommand::kTrackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayTrackCommand::PlayTrackCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PlayTrackCommand)
}
PlayTrackCommand::PlayTrackCommand(const PlayTrackCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.PlayTrackCommand)
}

void PlayTrackCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

PlayTrackCommand::~PlayTrackCommand() {
  // @@protoc_insertion_point(destructor:pas.PlayTrackCommand)
  SharedDtor();
}

void PlayTrackCommand::SharedDtor() {
}

void PlayTrackCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayTrackCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[10].descriptor;
}

const PlayTrackCommand& PlayTrackCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayTrackCommand* PlayTrackCommand::New(::google::protobuf::Arena* arena) const {
  PlayTrackCommand* n = new PlayTrackCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayTrackCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PlayTrackCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool PlayTrackCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PlayTrackCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 track_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PlayTrackCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PlayTrackCommand)
  return false;
#undef DO_
}

void PlayTrackCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PlayTrackCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // uint64 track_id = 3;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->track_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PlayTrackCommand)
}

::google::protobuf::uint8* PlayTrackCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.PlayTrackCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // uint64 track_id = 3;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->track_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PlayTrackCommand)
  return target;
}

size_t PlayTrackCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PlayTrackCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // uint64 track_id = 3;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->track_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayTrackCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PlayTrackCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayTrackCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayTrackCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PlayTrackCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PlayTrackCommand)
    MergeFrom(*source);
  }
}

void PlayTrackCommand::MergeFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PlayTrackCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PlayTrackCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTrackCommand::CopyFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTrackCommand::IsInitialized() const {
  return true;
}

void PlayTrackCommand::Swap(PlayTrackCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayTrackCommand::InternalSwap(PlayTrackCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(track_id_, other->track_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayTrackCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayTrackCommand

// .pas.Type type = 1;
void PlayTrackCommand::clear_type() {
  type_ = 0;
}
::pas::Type PlayTrackCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void PlayTrackCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.type)
}

// uint64 device_id = 2;
void PlayTrackCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PlayTrackCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.device_id)
  return device_id_;
}
void PlayTrackCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.device_id)
}

// uint64 track_id = 3;
void PlayTrackCommand::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PlayTrackCommand::track_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.track_id)
  return track_id_;
}
void PlayTrackCommand::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.track_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PauseDeviceCommand::kTypeFieldNumber;
const int PauseDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PauseDeviceCommand::PauseDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PauseDeviceCommand)
}
PauseDeviceCommand::PauseDeviceCommand(const PauseDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.PauseDeviceCommand)
}

void PauseDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

PauseDeviceCommand::~PauseDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.PauseDeviceCommand)
  SharedDtor();
}

void PauseDeviceCommand::SharedDtor() {
}

void PauseDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PauseDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[11].descriptor;
}

const PauseDeviceCommand& PauseDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

PauseDeviceCommand* PauseDeviceCommand::New(::google::protobuf::Arena* arena) const {
  PauseDeviceCommand* n = new PauseDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PauseDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PauseDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool PauseDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PauseDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PauseDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PauseDeviceCommand)
  return false;
#undef DO_
}

void PauseDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PauseDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PauseDeviceCommand)
}

::google::protobuf::uint8* PauseDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.PauseDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PauseDeviceCommand)
  return target;
}

size_t PauseDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PauseDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PauseDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PauseDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PauseDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PauseDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PauseDeviceCommand)
    MergeFrom(*source);
  }
}

void PauseDeviceCommand::MergeFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PauseDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PauseDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseDeviceCommand::CopyFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseDeviceCommand::IsInitialized() const {
  return true;
}

void PauseDeviceCommand::Swap(PauseDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PauseDeviceCommand::InternalSwap(PauseDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PauseDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PauseDeviceCommand

// .pas.Type type = 1;
void PauseDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type PauseDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void PauseDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.type)
}

// uint64 device_id = 2;
void PauseDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PauseDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.device_id)
  return device_id_;
}
void PauseDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResumeDeviceCommand::kTypeFieldNumber;
const int ResumeDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResumeDeviceCommand::ResumeDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ResumeDeviceCommand)
}
ResumeDeviceCommand::ResumeDeviceCommand(const ResumeDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.ResumeDeviceCommand)
}

void ResumeDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

ResumeDeviceCommand::~ResumeDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.ResumeDeviceCommand)
  SharedDtor();
}

void ResumeDeviceCommand::SharedDtor() {
}

void ResumeDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResumeDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[12].descriptor;
}

const ResumeDeviceCommand& ResumeDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResumeDeviceCommand* ResumeDeviceCommand::New(::google::protobuf::Arena* arena) const {
  ResumeDeviceCommand* n = new ResumeDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResumeDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ResumeDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool ResumeDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ResumeDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ResumeDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ResumeDeviceCommand)
  return false;
#undef DO_
}

void ResumeDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ResumeDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ResumeDeviceCommand)
}

::google::protobuf::uint8* ResumeDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.ResumeDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ResumeDeviceCommand)
  return target;
}

size_t ResumeDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ResumeDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResumeDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ResumeDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResumeDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ResumeDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ResumeDeviceCommand)
    MergeFrom(*source);
  }
}

void ResumeDeviceCommand::MergeFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ResumeDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ResumeDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeDeviceCommand::CopyFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeDeviceCommand::IsInitialized() const {
  return true;
}

void ResumeDeviceCommand::Swap(ResumeDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResumeDeviceCommand::InternalSwap(ResumeDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResumeDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResumeDeviceCommand

// .pas.Type type = 1;
void ResumeDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type ResumeDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void ResumeDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.type)
}

// uint64 device_id = 2;
void ResumeDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResumeDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.device_id)
  return device_id_;
}
void ResumeDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearDeviceCommand::kTypeFieldNumber;
const int ClearDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearDeviceCommand::ClearDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ClearDeviceCommand)
}
ClearDeviceCommand::ClearDeviceCommand(const ClearDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.ClearDeviceCommand)
}

void ClearDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

ClearDeviceCommand::~ClearDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.ClearDeviceCommand)
  SharedDtor();
}

void ClearDeviceCommand::SharedDtor() {
}

void ClearDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[13].descriptor;
}

const ClearDeviceCommand& ClearDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClearDeviceCommand* ClearDeviceCommand::New(::google::protobuf::Arena* arena) const {
  ClearDeviceCommand* n = new ClearDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ClearDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool ClearDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ClearDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ClearDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ClearDeviceCommand)
  return false;
#undef DO_
}

void ClearDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ClearDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ClearDeviceCommand)
}

::google::protobuf::uint8* ClearDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.ClearDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ClearDeviceCommand)
  return target;
}

size_t ClearDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ClearDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ClearDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ClearDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ClearDeviceCommand)
    MergeFrom(*source);
  }
}

void ClearDeviceCommand::MergeFrom(const ClearDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ClearDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ClearDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ClearDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearDeviceCommand::CopyFrom(const ClearDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ClearDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearDeviceCommand::IsInitialized() const {
  return true;
}

void ClearDeviceCommand::Swap(ClearDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearDeviceCommand::InternalSwap(ClearDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearDeviceCommand

// .pas.Type type = 1;
void ClearDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type ClearDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.ClearDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void ClearDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ClearDeviceCommand.type)
}

// uint64 device_id = 2;
void ClearDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ClearDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ClearDeviceCommand.device_id)
  return device_id_;
}
void ClearDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ClearDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopDeviceCommand::kTypeFieldNumber;
const int StopDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopDeviceCommand::StopDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.StopDeviceCommand)
}
StopDeviceCommand::StopDeviceCommand(const StopDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.StopDeviceCommand)
}

void StopDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

StopDeviceCommand::~StopDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.StopDeviceCommand)
  SharedDtor();
}

void StopDeviceCommand::SharedDtor() {
}

void StopDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[14].descriptor;
}

const StopDeviceCommand& StopDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopDeviceCommand* StopDeviceCommand::New(::google::protobuf::Arena* arena) const {
  StopDeviceCommand* n = new StopDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.StopDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool StopDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.StopDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.StopDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.StopDeviceCommand)
  return false;
#undef DO_
}

void StopDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.StopDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.StopDeviceCommand)
}

::google::protobuf::uint8* StopDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.StopDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.StopDeviceCommand)
  return target;
}

size_t StopDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.StopDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.StopDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const StopDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.StopDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.StopDeviceCommand)
    MergeFrom(*source);
  }
}

void StopDeviceCommand::MergeFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.StopDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StopDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDeviceCommand::CopyFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDeviceCommand::IsInitialized() const {
  return true;
}

void StopDeviceCommand::Swap(StopDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopDeviceCommand::InternalSwap(StopDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopDeviceCommand

// .pas.Type type = 1;
void StopDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type StopDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void StopDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.type)
}

// uint64 device_id = 2;
void StopDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StopDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.device_id)
  return device_id_;
}
void StopDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhoDeviceCommand::kTypeFieldNumber;
const int WhoDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhoDeviceCommand::WhoDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhoDeviceCommand)
}
WhoDeviceCommand::WhoDeviceCommand(const WhoDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.WhoDeviceCommand)
}

void WhoDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

WhoDeviceCommand::~WhoDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhoDeviceCommand)
  SharedDtor();
}

void WhoDeviceCommand::SharedDtor() {
}

void WhoDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[15].descriptor;
}

const WhoDeviceCommand& WhoDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhoDeviceCommand* WhoDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhoDeviceCommand* n = new WhoDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhoDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhoDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool WhoDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhoDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhoDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhoDeviceCommand)
  return false;
#undef DO_
}

void WhoDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhoDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhoDeviceCommand)
}

::google::protobuf::uint8* WhoDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhoDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhoDeviceCommand)
  return target;
}

size_t WhoDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhoDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhoDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const WhoDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhoDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhoDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhoDeviceCommand)
    MergeFrom(*source);
  }
}

void WhoDeviceCommand::MergeFrom(const WhoDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhoDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void WhoDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhoDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoDeviceCommand::CopyFrom(const WhoDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhoDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoDeviceCommand::IsInitialized() const {
  return true;
}

void WhoDeviceCommand::Swap(WhoDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhoDeviceCommand::InternalSwap(WhoDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhoDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhoDeviceCommand

// .pas.Type type = 1;
void WhoDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type WhoDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhoDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void WhoDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhoDeviceCommand.type)
}

// uint64 device_id = 2;
void WhoDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WhoDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhoDeviceCommand.device_id)
  return device_id_;
}
void WhoDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhoDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhatDeviceCommand::kTypeFieldNumber;
const int WhatDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhatDeviceCommand::WhatDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhatDeviceCommand)
}
WhatDeviceCommand::WhatDeviceCommand(const WhatDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.WhatDeviceCommand)
}

void WhatDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

WhatDeviceCommand::~WhatDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhatDeviceCommand)
  SharedDtor();
}

void WhatDeviceCommand::SharedDtor() {
}

void WhatDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhatDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[16].descriptor;
}

const WhatDeviceCommand& WhatDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhatDeviceCommand* WhatDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhatDeviceCommand* n = new WhatDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhatDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhatDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool WhatDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhatDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhatDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhatDeviceCommand)
  return false;
#undef DO_
}

void WhatDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhatDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhatDeviceCommand)
}

::google::protobuf::uint8* WhatDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhatDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhatDeviceCommand)
  return target;
}

size_t WhatDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhatDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhatDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhatDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const WhatDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhatDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhatDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhatDeviceCommand)
    MergeFrom(*source);
  }
}

void WhatDeviceCommand::MergeFrom(const WhatDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhatDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void WhatDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhatDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhatDeviceCommand::CopyFrom(const WhatDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhatDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhatDeviceCommand::IsInitialized() const {
  return true;
}

void WhatDeviceCommand::Swap(WhatDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhatDeviceCommand::InternalSwap(WhatDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhatDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhatDeviceCommand

// .pas.Type type = 1;
void WhatDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type WhatDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhatDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void WhatDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhatDeviceCommand.type)
}

// uint64 device_id = 2;
void WhatDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WhatDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhatDeviceCommand.device_id)
  return device_id_;
}
void WhatDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhatDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackCountQuery::TrackCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TrackCountQuery)
}
TrackCountQuery::TrackCountQuery(const TrackCountQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.TrackCountQuery)
}

void TrackCountQuery::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

TrackCountQuery::~TrackCountQuery() {
  // @@protoc_insertion_point(destructor:pas.TrackCountQuery)
  SharedDtor();
}

void TrackCountQuery::SharedDtor() {
}

void TrackCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackCountQuery::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[17].descriptor;
}

const TrackCountQuery& TrackCountQuery::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrackCountQuery* TrackCountQuery::New(::google::protobuf::Arena* arena) const {
  TrackCountQuery* n = new TrackCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TrackCountQuery)
  type_ = 0;
}

bool TrackCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TrackCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TrackCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TrackCountQuery)
  return false;
#undef DO_
}

void TrackCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TrackCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TrackCountQuery)
}

::google::protobuf::uint8* TrackCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.TrackCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TrackCountQuery)
  return target;
}

size_t TrackCountQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TrackCountQuery)
  size_t total_size = 0;

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TrackCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackCountQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TrackCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TrackCountQuery)
    MergeFrom(*source);
  }
}

void TrackCountQuery::MergeFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TrackCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrackCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackCountQuery::CopyFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackCountQuery::IsInitialized() const {
  return true;
}

void TrackCountQuery::Swap(TrackCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackCountQuery::InternalSwap(TrackCountQuery* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackCountQuery::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackCountQuery

// .pas.Type type = 1;
void TrackCountQuery::clear_type() {
  type_ = 0;
}
::pas::Type TrackCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.TrackCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
void TrackCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtistCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtistCountQuery::ArtistCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ArtistCountQuery)
}
ArtistCountQuery::ArtistCountQuery(const ArtistCountQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.ArtistCountQuery)
}

void ArtistCountQuery::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

ArtistCountQuery::~ArtistCountQuery() {
  // @@protoc_insertion_point(destructor:pas.ArtistCountQuery)
  SharedDtor();
}

void ArtistCountQuery::SharedDtor() {
}

void ArtistCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtistCountQuery::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[18].descriptor;
}

const ArtistCountQuery& ArtistCountQuery::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

ArtistCountQuery* ArtistCountQuery::New(::google::protobuf::Arena* arena) const {
  ArtistCountQuery* n = new ArtistCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArtistCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ArtistCountQuery)
  type_ = 0;
}

bool ArtistCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ArtistCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ArtistCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ArtistCountQuery)
  return false;
#undef DO_
}

void ArtistCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ArtistCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ArtistCountQuery)
}

::google::protobuf::uint8* ArtistCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.ArtistCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ArtistCountQuery)
  return target;
}

size_t ArtistCountQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ArtistCountQuery)
  size_t total_size = 0;

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtistCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ArtistCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistCountQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArtistCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ArtistCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ArtistCountQuery)
    MergeFrom(*source);
  }
}

void ArtistCountQuery::MergeFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ArtistCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ArtistCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistCountQuery::CopyFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistCountQuery::IsInitialized() const {
  return true;
}

void ArtistCountQuery::Swap(ArtistCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtistCountQuery::InternalSwap(ArtistCountQuery* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArtistCountQuery::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArtistCountQuery

// .pas.Type type = 1;
void ArtistCountQuery::clear_type() {
  type_ = 0;
}
::pas::Type ArtistCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.ArtistCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
void ArtistCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ArtistCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FolderCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FolderCountQuery::FolderCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.FolderCountQuery)
}
FolderCountQuery::FolderCountQuery(const FolderCountQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.FolderCountQuery)
}

void FolderCountQuery::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

FolderCountQuery::~FolderCountQuery() {
  // @@protoc_insertion_point(destructor:pas.FolderCountQuery)
  SharedDtor();
}

void FolderCountQuery::SharedDtor() {
}

void FolderCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolderCountQuery::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[19].descriptor;
}

const FolderCountQuery& FolderCountQuery::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

FolderCountQuery* FolderCountQuery::New(::google::protobuf::Arena* arena) const {
  FolderCountQuery* n = new FolderCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FolderCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.FolderCountQuery)
  type_ = 0;
}

bool FolderCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.FolderCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.FolderCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.FolderCountQuery)
  return false;
#undef DO_
}

void FolderCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.FolderCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.FolderCountQuery)
}

::google::protobuf::uint8* FolderCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.FolderCountQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.FolderCountQuery)
  return target;
}

size_t FolderCountQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.FolderCountQuery)
  size_t total_size = 0;

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.FolderCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const FolderCountQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FolderCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.FolderCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.FolderCountQuery)
    MergeFrom(*source);
  }
}

void FolderCountQuery::MergeFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.FolderCountQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FolderCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderCountQuery::CopyFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderCountQuery::IsInitialized() const {
  return true;
}

void FolderCountQuery::Swap(FolderCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FolderCountQuery::InternalSwap(FolderCountQuery* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FolderCountQuery::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FolderCountQuery

// .pas.Type type = 1;
void FolderCountQuery::clear_type() {
  type_ = 0;
}
::pas::Type FolderCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.FolderCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
void FolderCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.FolderCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectQuery::kTypeFieldNumber;
const int SelectQuery::kColumnFieldNumber;
const int SelectQuery::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectQuery::SelectQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.SelectQuery)
}
SelectQuery::SelectQuery(const SelectQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.column().size() > 0) {
    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pas.SelectQuery)
}

void SelectQuery::SharedCtor() {
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

SelectQuery::~SelectQuery() {
  // @@protoc_insertion_point(destructor:pas.SelectQuery)
  SharedDtor();
}

void SelectQuery::SharedDtor() {
  column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SelectQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectQuery::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[20].descriptor;
}

const SelectQuery& SelectQuery::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectQuery* SelectQuery::New(::google::protobuf::Arena* arena) const {
  SelectQuery* n = new SelectQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.SelectQuery)
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool SelectQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.SelectQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string column = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column().data(), this->column().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.column"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pattern = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.SelectQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.SelectQuery)
  return false;
#undef DO_
}

void SelectQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.SelectQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->column(), output);
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pattern(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.SelectQuery)
}

::google::protobuf::uint8* SelectQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.SelectQuery)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column(), target);
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pattern(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.SelectQuery)
  return target;
}

size_t SelectQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.SelectQuery)
  size_t total_size = 0;

  // string column = 2;
  if (this->column().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column());
  }

  // string pattern = 3;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.SelectQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.SelectQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.SelectQuery)
    MergeFrom(*source);
  }
}

void SelectQuery::MergeFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.SelectQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.column().size() > 0) {

    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SelectQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectQuery::CopyFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectQuery::IsInitialized() const {
  return true;
}

void SelectQuery::Swap(SelectQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectQuery::InternalSwap(SelectQuery* other) {
  column_.Swap(&other->column_);
  pattern_.Swap(&other->pattern_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectQuery::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectQuery

// .pas.Type type = 1;
void SelectQuery::clear_type() {
  type_ = 0;
}
::pas::Type SelectQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.type)
  return static_cast< ::pas::Type >(type_);
}
void SelectQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.SelectQuery.type)
}

// string column = 2;
void SelectQuery::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectQuery::column() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.column)
  return column_.GetNoArena();
}
void SelectQuery::set_column(const ::std::string& value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.column)
}
#if LANG_CXX11
void SelectQuery::set_column(::std::string&& value) {
  
  column_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pas.SelectQuery.column)
}
#endif
void SelectQuery::set_column(const char* value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.column)
}
void SelectQuery::set_column(const char* value, size_t size) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.column)
}
::std::string* SelectQuery::mutable_column() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectQuery::release_column() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.column)
  
  return column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectQuery::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    
  } else {
    
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.column)
}

// string pattern = 3;
void SelectQuery::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SelectQuery::pattern() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.pattern)
  return pattern_.GetNoArena();
}
void SelectQuery::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.pattern)
}
#if LANG_CXX11
void SelectQuery::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pas.SelectQuery.pattern)
}
#endif
void SelectQuery::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.pattern)
}
void SelectQuery::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.pattern)
}
::std::string* SelectQuery::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SelectQuery::release_pattern() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SelectQuery::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhenDeviceCommand::kTypeFieldNumber;
const int WhenDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhenDeviceCommand::WhenDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.WhenDeviceCommand)
}
WhenDeviceCommand::WhenDeviceCommand(const WhenDeviceCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_id_, &from.device_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pas.WhenDeviceCommand)
}

void WhenDeviceCommand::SharedCtor() {
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
  _cached_size_ = 0;
}

WhenDeviceCommand::~WhenDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.WhenDeviceCommand)
  SharedDtor();
}

void WhenDeviceCommand::SharedDtor() {
}

void WhenDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhenDeviceCommand::descriptor() {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[21].descriptor;
}

const WhenDeviceCommand& WhenDeviceCommand::default_instance() {
  protobuf_commands_2eproto::InitDefaults();
  return *internal_default_instance();
}

WhenDeviceCommand* WhenDeviceCommand::New(::google::protobuf::Arena* arena) const {
  WhenDeviceCommand* n = new WhenDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhenDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.WhenDeviceCommand)
  ::memset(&device_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_id_) + sizeof(type_));
}

bool WhenDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.WhenDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pas.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 device_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.WhenDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.WhenDeviceCommand)
  return false;
#undef DO_
}

void WhenDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.WhenDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.WhenDeviceCommand)
}

::google::protobuf::uint8* WhenDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pas.WhenDeviceCommand)
  // .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.WhenDeviceCommand)
  return target;
}

size_t WhenDeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pas.WhenDeviceCommand)
  size_t total_size = 0;

  // uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhenDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.WhenDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const WhenDeviceCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhenDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.WhenDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.WhenDeviceCommand)
    MergeFrom(*source);
  }
}

void WhenDeviceCommand::MergeFrom(const WhenDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.WhenDeviceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void WhenDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.WhenDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhenDeviceCommand::CopyFrom(const WhenDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.WhenDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhenDeviceCommand::IsInitialized() const {
  return true;
}

void WhenDeviceCommand::Swap(WhenDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhenDeviceCommand::InternalSwap(WhenDeviceCommand* other) {
  std::swap(device_id_, other->device_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhenDeviceCommand::GetMetadata() const {
  protobuf_commands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commands_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhenDeviceCommand

// .pas.Type type = 1;
void WhenDeviceCommand::clear_type() {
  type_ = 0;
}
::pas::Type WhenDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.WhenDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
void WhenDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.WhenDeviceCommand.type)
}

// uint64 device_id = 2;
void WhenDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WhenDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.WhenDeviceCommand.device_id)
  return device_id_;
}
void WhenDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.WhenDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pas

// @@protoc_insertion_point(global_scope)
