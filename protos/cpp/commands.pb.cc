// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pas {

namespace {

const ::google::protobuf::Descriptor* GenericPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayTrackCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayTrackCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* PauseDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PauseDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResumeDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResumeDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopDeviceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopDeviceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackQueryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackQueryCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeQueryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeQueryCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtistCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtistCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* FolderCountQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FolderCountQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentQuery_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_commands_2eproto() {
  protobuf_AddDesc_commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commands.proto");
  GOOGLE_CHECK(file != NULL);
  GenericPB_descriptor_ = file->message_type(0);
  static const int GenericPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, type_),
  };
  GenericPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericPB_descriptor_,
      GenericPB::default_instance_,
      GenericPB_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericPB, _is_default_instance_));
  PlayTrackCommand_descriptor_ = file->message_type(1);
  static const int PlayTrackCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, track_id_),
  };
  PlayTrackCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayTrackCommand_descriptor_,
      PlayTrackCommand::default_instance_,
      PlayTrackCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayTrackCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayTrackCommand, _is_default_instance_));
  PauseDeviceCommand_descriptor_ = file->message_type(2);
  static const int PauseDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, device_id_),
  };
  PauseDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PauseDeviceCommand_descriptor_,
      PauseDeviceCommand::default_instance_,
      PauseDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(PauseDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PauseDeviceCommand, _is_default_instance_));
  ResumeDeviceCommand_descriptor_ = file->message_type(3);
  static const int ResumeDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, device_id_),
  };
  ResumeDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResumeDeviceCommand_descriptor_,
      ResumeDeviceCommand::default_instance_,
      ResumeDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResumeDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResumeDeviceCommand, _is_default_instance_));
  StopDeviceCommand_descriptor_ = file->message_type(4);
  static const int StopDeviceCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, device_id_),
  };
  StopDeviceCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopDeviceCommand_descriptor_,
      StopDeviceCommand::default_instance_,
      StopDeviceCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(StopDeviceCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDeviceCommand, _is_default_instance_));
  TrackQueryCommand_descriptor_ = file->message_type(5);
  static const int TrackQueryCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackQueryCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackQueryCommand, device_id_),
  };
  TrackQueryCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackQueryCommand_descriptor_,
      TrackQueryCommand::default_instance_,
      TrackQueryCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackQueryCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackQueryCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackQueryCommand, _is_default_instance_));
  TimeQueryCommand_descriptor_ = file->message_type(6);
  static const int TimeQueryCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeQueryCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeQueryCommand, device_id_),
  };
  TimeQueryCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeQueryCommand_descriptor_,
      TimeQueryCommand::default_instance_,
      TimeQueryCommand_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeQueryCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeQueryCommand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeQueryCommand, _is_default_instance_));
  TrackCountQuery_descriptor_ = file->message_type(7);
  static const int TrackCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, type_),
  };
  TrackCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackCountQuery_descriptor_,
      TrackCountQuery::default_instance_,
      TrackCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackCountQuery, _is_default_instance_));
  ArtistCountQuery_descriptor_ = file->message_type(8);
  static const int ArtistCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, type_),
  };
  ArtistCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArtistCountQuery_descriptor_,
      ArtistCountQuery::default_instance_,
      ArtistCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArtistCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtistCountQuery, _is_default_instance_));
  FolderCountQuery_descriptor_ = file->message_type(9);
  static const int FolderCountQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, type_),
  };
  FolderCountQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FolderCountQuery_descriptor_,
      FolderCountQuery::default_instance_,
      FolderCountQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(FolderCountQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderCountQuery, _is_default_instance_));
  SelectQuery_descriptor_ = file->message_type(10);
  static const int SelectQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, pattern_),
  };
  SelectQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SelectQuery_descriptor_,
      SelectQuery::default_instance_,
      SelectQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(SelectQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectQuery, _is_default_instance_));
  ContentQuery_descriptor_ = file->message_type(11);
  static const int ContentQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentQuery, path_),
  };
  ContentQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentQuery_descriptor_,
      ContentQuery::default_instance_,
      ContentQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentQuery, _is_default_instance_));
  Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericPB_descriptor_, &GenericPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayTrackCommand_descriptor_, &PlayTrackCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PauseDeviceCommand_descriptor_, &PauseDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResumeDeviceCommand_descriptor_, &ResumeDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopDeviceCommand_descriptor_, &StopDeviceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackQueryCommand_descriptor_, &TrackQueryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeQueryCommand_descriptor_, &TimeQueryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackCountQuery_descriptor_, &TrackCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArtistCountQuery_descriptor_, &ArtistCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FolderCountQuery_descriptor_, &FolderCountQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SelectQuery_descriptor_, &SelectQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentQuery_descriptor_, &ContentQuery::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commands_2eproto() {
  delete GenericPB::default_instance_;
  delete GenericPB_reflection_;
  delete PlayTrackCommand::default_instance_;
  delete PlayTrackCommand_reflection_;
  delete PauseDeviceCommand::default_instance_;
  delete PauseDeviceCommand_reflection_;
  delete ResumeDeviceCommand::default_instance_;
  delete ResumeDeviceCommand_reflection_;
  delete StopDeviceCommand::default_instance_;
  delete StopDeviceCommand_reflection_;
  delete TrackQueryCommand::default_instance_;
  delete TrackQueryCommand_reflection_;
  delete TimeQueryCommand::default_instance_;
  delete TimeQueryCommand_reflection_;
  delete TrackCountQuery::default_instance_;
  delete TrackCountQuery_reflection_;
  delete ArtistCountQuery::default_instance_;
  delete ArtistCountQuery_reflection_;
  delete FolderCountQuery::default_instance_;
  delete FolderCountQuery_reflection_;
  delete SelectQuery::default_instance_;
  delete SelectQuery_reflection_;
  delete ContentQuery::default_instance_;
  delete ContentQuery_reflection_;
}

void protobuf_AddDesc_commands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016commands.proto\022\003pas\"$\n\tGenericPB\022\027\n\004ty"
    "pe\030\001 \001(\0162\t.pas.Type\"P\n\020PlayTrackCommand\022"
    "\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 "
    "\001(\004\022\020\n\010track_id\030\003 \001(\004\"@\n\022PauseDeviceComm"
    "and\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_i"
    "d\030\002 \001(\004\"A\n\023ResumeDeviceCommand\022\027\n\004type\030\001"
    " \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002 \001(\004\"\?\n\021St"
    "opDeviceCommand\022\027\n\004type\030\001 \001(\0162\t.pas.Type"
    "\022\021\n\tdevice_id\030\002 \001(\004\"\?\n\021TrackQueryCommand"
    "\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\021\n\tdevice_id\030\002"
    " \001(\004\">\n\020TimeQueryCommand\022\027\n\004type\030\001 \001(\0162\t"
    ".pas.Type\022\021\n\tdevice_id\030\002 \001(\004\"*\n\017TrackCou"
    "ntQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Type\"+\n\020Arti"
    "stCountQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Type\"+\n"
    "\020FolderCountQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Ty"
    "pe\"G\n\013SelectQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Ty"
    "pe\022\016\n\006column\030\002 \001(\t\022\017\n\007pattern\030\003 \001(\t\"5\n\014C"
    "ontentQuery\022\027\n\004type\030\001 \001(\0162\t.pas.Type\022\014\n\004"
    "path\030\002 \001(\t*\354\001\n\004Type\022\013\n\007GENERIC\020\000\022\025\n\021PLAY"
    "_TRACK_DEVICE\020\001\022\020\n\014PAUSE_DEVICE\020\002\022\021\n\rRES"
    "UME_DEVICE\020\003\022\017\n\013STOP_DEVICE\020\004\022\016\n\nWHO_DEV"
    "ICE\020\005\022\017\n\013WHAT_DEVICE\020\006\022\017\n\013TRACK_COUNT\020\007\022"
    "\020\n\014ARTIST_COUNT\020\010\022\020\n\014FOLDER_COUNT\020\t\022\020\n\014S"
    "ELECT_QUERY\020\n\022\021\n\rCONTENT_QUERY\020\013\022\017\n\013WHEN"
    "_DEVICE\020\014b\006proto3", 977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commands.proto", &protobuf_RegisterTypes);
  GenericPB::default_instance_ = new GenericPB();
  PlayTrackCommand::default_instance_ = new PlayTrackCommand();
  PauseDeviceCommand::default_instance_ = new PauseDeviceCommand();
  ResumeDeviceCommand::default_instance_ = new ResumeDeviceCommand();
  StopDeviceCommand::default_instance_ = new StopDeviceCommand();
  TrackQueryCommand::default_instance_ = new TrackQueryCommand();
  TimeQueryCommand::default_instance_ = new TimeQueryCommand();
  TrackCountQuery::default_instance_ = new TrackCountQuery();
  ArtistCountQuery::default_instance_ = new ArtistCountQuery();
  FolderCountQuery::default_instance_ = new FolderCountQuery();
  SelectQuery::default_instance_ = new SelectQuery();
  ContentQuery::default_instance_ = new ContentQuery();
  GenericPB::default_instance_->InitAsDefaultInstance();
  PlayTrackCommand::default_instance_->InitAsDefaultInstance();
  PauseDeviceCommand::default_instance_->InitAsDefaultInstance();
  ResumeDeviceCommand::default_instance_->InitAsDefaultInstance();
  StopDeviceCommand::default_instance_->InitAsDefaultInstance();
  TrackQueryCommand::default_instance_->InitAsDefaultInstance();
  TimeQueryCommand::default_instance_->InitAsDefaultInstance();
  TrackCountQuery::default_instance_->InitAsDefaultInstance();
  ArtistCountQuery::default_instance_->InitAsDefaultInstance();
  FolderCountQuery::default_instance_->InitAsDefaultInstance();
  SelectQuery::default_instance_->InitAsDefaultInstance();
  ContentQuery::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commands_2eproto {
  StaticDescriptorInitializer_commands_2eproto() {
    protobuf_AddDesc_commands_2eproto();
  }
} static_descriptor_initializer_commands_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenericPB::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericPB::GenericPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.GenericPB)
}

void GenericPB::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GenericPB::GenericPB(const GenericPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.GenericPB)
}

void GenericPB::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

GenericPB::~GenericPB() {
  // @@protoc_insertion_point(destructor:pas.GenericPB)
  SharedDtor();
}

void GenericPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenericPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericPB_descriptor_;
}

const GenericPB& GenericPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

GenericPB* GenericPB::default_instance_ = NULL;

GenericPB* GenericPB::New(::google::protobuf::Arena* arena) const {
  GenericPB* n = new GenericPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericPB::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.GenericPB)
  type_ = 0;
}

bool GenericPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.GenericPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.GenericPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.GenericPB)
  return false;
#undef DO_
}

void GenericPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.GenericPB)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.GenericPB)
}

::google::protobuf::uint8* GenericPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.GenericPB)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.GenericPB)
  return target;
}

int GenericPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.GenericPB)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.GenericPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.GenericPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.GenericPB)
    MergeFrom(*source);
  }
}

void GenericPB::MergeFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.GenericPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GenericPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericPB::CopyFrom(const GenericPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.GenericPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPB::IsInitialized() const {

  return true;
}

void GenericPB::Swap(GenericPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericPB::InternalSwap(GenericPB* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericPB_descriptor_;
  metadata.reflection = GenericPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericPB

// optional .pas.Type type = 1;
void GenericPB::clear_type() {
  type_ = 0;
}
 ::pas::Type GenericPB::type() const {
  // @@protoc_insertion_point(field_get:pas.GenericPB.type)
  return static_cast< ::pas::Type >(type_);
}
 void GenericPB::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.GenericPB.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayTrackCommand::kTypeFieldNumber;
const int PlayTrackCommand::kDeviceIdFieldNumber;
const int PlayTrackCommand::kTrackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayTrackCommand::PlayTrackCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PlayTrackCommand)
}

void PlayTrackCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlayTrackCommand::PlayTrackCommand(const PlayTrackCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.PlayTrackCommand)
}

void PlayTrackCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  track_id_ = GOOGLE_ULONGLONG(0);
}

PlayTrackCommand::~PlayTrackCommand() {
  // @@protoc_insertion_point(destructor:pas.PlayTrackCommand)
  SharedDtor();
}

void PlayTrackCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayTrackCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayTrackCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayTrackCommand_descriptor_;
}

const PlayTrackCommand& PlayTrackCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

PlayTrackCommand* PlayTrackCommand::default_instance_ = NULL;

PlayTrackCommand* PlayTrackCommand::New(::google::protobuf::Arena* arena) const {
  PlayTrackCommand* n = new PlayTrackCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayTrackCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PlayTrackCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayTrackCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayTrackCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool PlayTrackCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PlayTrackCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_track_id;
        break;
      }

      // optional uint64 track_id = 3;
      case 3: {
        if (tag == 24) {
         parse_track_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &track_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PlayTrackCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PlayTrackCommand)
  return false;
#undef DO_
}

void PlayTrackCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PlayTrackCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->track_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PlayTrackCommand)
}

::google::protobuf::uint8* PlayTrackCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.PlayTrackCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->track_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PlayTrackCommand)
  return target;
}

int PlayTrackCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PlayTrackCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  // optional uint64 track_id = 3;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->track_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayTrackCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PlayTrackCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayTrackCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayTrackCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PlayTrackCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PlayTrackCommand)
    MergeFrom(*source);
  }
}

void PlayTrackCommand::MergeFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PlayTrackCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
}

void PlayTrackCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayTrackCommand::CopyFrom(const PlayTrackCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PlayTrackCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayTrackCommand::IsInitialized() const {

  return true;
}

void PlayTrackCommand::Swap(PlayTrackCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayTrackCommand::InternalSwap(PlayTrackCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  std::swap(track_id_, other->track_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayTrackCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayTrackCommand_descriptor_;
  metadata.reflection = PlayTrackCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayTrackCommand

// optional .pas.Type type = 1;
void PlayTrackCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type PlayTrackCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void PlayTrackCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.type)
}

// optional uint64 device_id = 2;
void PlayTrackCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayTrackCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.device_id)
  return device_id_;
}
 void PlayTrackCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.device_id)
}

// optional uint64 track_id = 3;
void PlayTrackCommand::clear_track_id() {
  track_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PlayTrackCommand::track_id() const {
  // @@protoc_insertion_point(field_get:pas.PlayTrackCommand.track_id)
  return track_id_;
}
 void PlayTrackCommand::set_track_id(::google::protobuf::uint64 value) {
  
  track_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PlayTrackCommand.track_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PauseDeviceCommand::kTypeFieldNumber;
const int PauseDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PauseDeviceCommand::PauseDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.PauseDeviceCommand)
}

void PauseDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PauseDeviceCommand::PauseDeviceCommand(const PauseDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.PauseDeviceCommand)
}

void PauseDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

PauseDeviceCommand::~PauseDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.PauseDeviceCommand)
  SharedDtor();
}

void PauseDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PauseDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PauseDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PauseDeviceCommand_descriptor_;
}

const PauseDeviceCommand& PauseDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

PauseDeviceCommand* PauseDeviceCommand::default_instance_ = NULL;

PauseDeviceCommand* PauseDeviceCommand::New(::google::protobuf::Arena* arena) const {
  PauseDeviceCommand* n = new PauseDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PauseDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.PauseDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PauseDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PauseDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool PauseDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.PauseDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.PauseDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.PauseDeviceCommand)
  return false;
#undef DO_
}

void PauseDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.PauseDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.PauseDeviceCommand)
}

::google::protobuf::uint8* PauseDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.PauseDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.PauseDeviceCommand)
  return target;
}

int PauseDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.PauseDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PauseDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.PauseDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PauseDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PauseDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.PauseDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.PauseDeviceCommand)
    MergeFrom(*source);
  }
}

void PauseDeviceCommand::MergeFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.PauseDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void PauseDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseDeviceCommand::CopyFrom(const PauseDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.PauseDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseDeviceCommand::IsInitialized() const {

  return true;
}

void PauseDeviceCommand::Swap(PauseDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PauseDeviceCommand::InternalSwap(PauseDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PauseDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PauseDeviceCommand_descriptor_;
  metadata.reflection = PauseDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PauseDeviceCommand

// optional .pas.Type type = 1;
void PauseDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type PauseDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void PauseDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.type)
}

// optional uint64 device_id = 2;
void PauseDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PauseDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.PauseDeviceCommand.device_id)
  return device_id_;
}
 void PauseDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.PauseDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResumeDeviceCommand::kTypeFieldNumber;
const int ResumeDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResumeDeviceCommand::ResumeDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ResumeDeviceCommand)
}

void ResumeDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResumeDeviceCommand::ResumeDeviceCommand(const ResumeDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ResumeDeviceCommand)
}

void ResumeDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

ResumeDeviceCommand::~ResumeDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.ResumeDeviceCommand)
  SharedDtor();
}

void ResumeDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResumeDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResumeDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResumeDeviceCommand_descriptor_;
}

const ResumeDeviceCommand& ResumeDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ResumeDeviceCommand* ResumeDeviceCommand::default_instance_ = NULL;

ResumeDeviceCommand* ResumeDeviceCommand::New(::google::protobuf::Arena* arena) const {
  ResumeDeviceCommand* n = new ResumeDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResumeDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ResumeDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResumeDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResumeDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ResumeDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ResumeDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ResumeDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ResumeDeviceCommand)
  return false;
#undef DO_
}

void ResumeDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ResumeDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ResumeDeviceCommand)
}

::google::protobuf::uint8* ResumeDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ResumeDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ResumeDeviceCommand)
  return target;
}

int ResumeDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ResumeDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResumeDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ResumeDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResumeDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResumeDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ResumeDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ResumeDeviceCommand)
    MergeFrom(*source);
  }
}

void ResumeDeviceCommand::MergeFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ResumeDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void ResumeDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeDeviceCommand::CopyFrom(const ResumeDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ResumeDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeDeviceCommand::IsInitialized() const {

  return true;
}

void ResumeDeviceCommand::Swap(ResumeDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResumeDeviceCommand::InternalSwap(ResumeDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResumeDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResumeDeviceCommand_descriptor_;
  metadata.reflection = ResumeDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResumeDeviceCommand

// optional .pas.Type type = 1;
void ResumeDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type ResumeDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void ResumeDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.type)
}

// optional uint64 device_id = 2;
void ResumeDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ResumeDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.ResumeDeviceCommand.device_id)
  return device_id_;
}
 void ResumeDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.ResumeDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopDeviceCommand::kTypeFieldNumber;
const int StopDeviceCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopDeviceCommand::StopDeviceCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.StopDeviceCommand)
}

void StopDeviceCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StopDeviceCommand::StopDeviceCommand(const StopDeviceCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.StopDeviceCommand)
}

void StopDeviceCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

StopDeviceCommand::~StopDeviceCommand() {
  // @@protoc_insertion_point(destructor:pas.StopDeviceCommand)
  SharedDtor();
}

void StopDeviceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopDeviceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopDeviceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopDeviceCommand_descriptor_;
}

const StopDeviceCommand& StopDeviceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

StopDeviceCommand* StopDeviceCommand::default_instance_ = NULL;

StopDeviceCommand* StopDeviceCommand::New(::google::protobuf::Arena* arena) const {
  StopDeviceCommand* n = new StopDeviceCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopDeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.StopDeviceCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopDeviceCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopDeviceCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool StopDeviceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.StopDeviceCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.StopDeviceCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.StopDeviceCommand)
  return false;
#undef DO_
}

void StopDeviceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.StopDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.StopDeviceCommand)
}

::google::protobuf::uint8* StopDeviceCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.StopDeviceCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.StopDeviceCommand)
  return target;
}

int StopDeviceCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.StopDeviceCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopDeviceCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.StopDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopDeviceCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopDeviceCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.StopDeviceCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.StopDeviceCommand)
    MergeFrom(*source);
  }
}

void StopDeviceCommand::MergeFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.StopDeviceCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void StopDeviceCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDeviceCommand::CopyFrom(const StopDeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.StopDeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDeviceCommand::IsInitialized() const {

  return true;
}

void StopDeviceCommand::Swap(StopDeviceCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopDeviceCommand::InternalSwap(StopDeviceCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopDeviceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopDeviceCommand_descriptor_;
  metadata.reflection = StopDeviceCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopDeviceCommand

// optional .pas.Type type = 1;
void StopDeviceCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type StopDeviceCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void StopDeviceCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.type)
}

// optional uint64 device_id = 2;
void StopDeviceCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StopDeviceCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.StopDeviceCommand.device_id)
  return device_id_;
}
 void StopDeviceCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.StopDeviceCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackQueryCommand::kTypeFieldNumber;
const int TrackQueryCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackQueryCommand::TrackQueryCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TrackQueryCommand)
}

void TrackQueryCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackQueryCommand::TrackQueryCommand(const TrackQueryCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.TrackQueryCommand)
}

void TrackQueryCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

TrackQueryCommand::~TrackQueryCommand() {
  // @@protoc_insertion_point(destructor:pas.TrackQueryCommand)
  SharedDtor();
}

void TrackQueryCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackQueryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackQueryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackQueryCommand_descriptor_;
}

const TrackQueryCommand& TrackQueryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

TrackQueryCommand* TrackQueryCommand::default_instance_ = NULL;

TrackQueryCommand* TrackQueryCommand::New(::google::protobuf::Arena* arena) const {
  TrackQueryCommand* n = new TrackQueryCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackQueryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TrackQueryCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackQueryCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackQueryCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool TrackQueryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TrackQueryCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TrackQueryCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TrackQueryCommand)
  return false;
#undef DO_
}

void TrackQueryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TrackQueryCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TrackQueryCommand)
}

::google::protobuf::uint8* TrackQueryCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.TrackQueryCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TrackQueryCommand)
  return target;
}

int TrackQueryCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TrackQueryCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackQueryCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TrackQueryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackQueryCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackQueryCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TrackQueryCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TrackQueryCommand)
    MergeFrom(*source);
  }
}

void TrackQueryCommand::MergeFrom(const TrackQueryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TrackQueryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void TrackQueryCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TrackQueryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackQueryCommand::CopyFrom(const TrackQueryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TrackQueryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackQueryCommand::IsInitialized() const {

  return true;
}

void TrackQueryCommand::Swap(TrackQueryCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackQueryCommand::InternalSwap(TrackQueryCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackQueryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackQueryCommand_descriptor_;
  metadata.reflection = TrackQueryCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackQueryCommand

// optional .pas.Type type = 1;
void TrackQueryCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type TrackQueryCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.TrackQueryCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void TrackQueryCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackQueryCommand.type)
}

// optional uint64 device_id = 2;
void TrackQueryCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TrackQueryCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.TrackQueryCommand.device_id)
  return device_id_;
}
 void TrackQueryCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackQueryCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeQueryCommand::kTypeFieldNumber;
const int TimeQueryCommand::kDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeQueryCommand::TimeQueryCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TimeQueryCommand)
}

void TimeQueryCommand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimeQueryCommand::TimeQueryCommand(const TimeQueryCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.TimeQueryCommand)
}

void TimeQueryCommand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
}

TimeQueryCommand::~TimeQueryCommand() {
  // @@protoc_insertion_point(destructor:pas.TimeQueryCommand)
  SharedDtor();
}

void TimeQueryCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeQueryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeQueryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeQueryCommand_descriptor_;
}

const TimeQueryCommand& TimeQueryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

TimeQueryCommand* TimeQueryCommand::default_instance_ = NULL;

TimeQueryCommand* TimeQueryCommand::New(::google::protobuf::Arena* arena) const {
  TimeQueryCommand* n = new TimeQueryCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeQueryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TimeQueryCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeQueryCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeQueryCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_id_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeQueryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TimeQueryCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }

      // optional uint64 device_id = 2;
      case 2: {
        if (tag == 16) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TimeQueryCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TimeQueryCommand)
  return false;
#undef DO_
}

void TimeQueryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TimeQueryCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TimeQueryCommand)
}

::google::protobuf::uint8* TimeQueryCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.TimeQueryCommand)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TimeQueryCommand)
  return target;
}

int TimeQueryCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TimeQueryCommand)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 device_id = 2;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeQueryCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TimeQueryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TimeQueryCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeQueryCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TimeQueryCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TimeQueryCommand)
    MergeFrom(*source);
  }
}

void TimeQueryCommand::MergeFrom(const TimeQueryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TimeQueryCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.device_id() != 0) {
    set_device_id(from.device_id());
  }
}

void TimeQueryCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TimeQueryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeQueryCommand::CopyFrom(const TimeQueryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TimeQueryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeQueryCommand::IsInitialized() const {

  return true;
}

void TimeQueryCommand::Swap(TimeQueryCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeQueryCommand::InternalSwap(TimeQueryCommand* other) {
  std::swap(type_, other->type_);
  std::swap(device_id_, other->device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeQueryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeQueryCommand_descriptor_;
  metadata.reflection = TimeQueryCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeQueryCommand

// optional .pas.Type type = 1;
void TimeQueryCommand::clear_type() {
  type_ = 0;
}
 ::pas::Type TimeQueryCommand::type() const {
  // @@protoc_insertion_point(field_get:pas.TimeQueryCommand.type)
  return static_cast< ::pas::Type >(type_);
}
 void TimeQueryCommand::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TimeQueryCommand.type)
}

// optional uint64 device_id = 2;
void TimeQueryCommand::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimeQueryCommand::device_id() const {
  // @@protoc_insertion_point(field_get:pas.TimeQueryCommand.device_id)
  return device_id_;
}
 void TimeQueryCommand::set_device_id(::google::protobuf::uint64 value) {
  
  device_id_ = value;
  // @@protoc_insertion_point(field_set:pas.TimeQueryCommand.device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackCountQuery::TrackCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.TrackCountQuery)
}

void TrackCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackCountQuery::TrackCountQuery(const TrackCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.TrackCountQuery)
}

void TrackCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

TrackCountQuery::~TrackCountQuery() {
  // @@protoc_insertion_point(destructor:pas.TrackCountQuery)
  SharedDtor();
}

void TrackCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackCountQuery_descriptor_;
}

const TrackCountQuery& TrackCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

TrackCountQuery* TrackCountQuery::default_instance_ = NULL;

TrackCountQuery* TrackCountQuery::New(::google::protobuf::Arena* arena) const {
  TrackCountQuery* n = new TrackCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.TrackCountQuery)
  type_ = 0;
}

bool TrackCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.TrackCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.TrackCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.TrackCountQuery)
  return false;
#undef DO_
}

void TrackCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.TrackCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.TrackCountQuery)
}

::google::protobuf::uint8* TrackCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.TrackCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.TrackCountQuery)
  return target;
}

int TrackCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.TrackCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.TrackCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.TrackCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.TrackCountQuery)
    MergeFrom(*source);
  }
}

void TrackCountQuery::MergeFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.TrackCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrackCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackCountQuery::CopyFrom(const TrackCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.TrackCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackCountQuery::IsInitialized() const {

  return true;
}

void TrackCountQuery::Swap(TrackCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackCountQuery::InternalSwap(TrackCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackCountQuery_descriptor_;
  metadata.reflection = TrackCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackCountQuery

// optional .pas.Type type = 1;
void TrackCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type TrackCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.TrackCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void TrackCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.TrackCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArtistCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArtistCountQuery::ArtistCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ArtistCountQuery)
}

void ArtistCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArtistCountQuery::ArtistCountQuery(const ArtistCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ArtistCountQuery)
}

void ArtistCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

ArtistCountQuery::~ArtistCountQuery() {
  // @@protoc_insertion_point(destructor:pas.ArtistCountQuery)
  SharedDtor();
}

void ArtistCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtistCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtistCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtistCountQuery_descriptor_;
}

const ArtistCountQuery& ArtistCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ArtistCountQuery* ArtistCountQuery::default_instance_ = NULL;

ArtistCountQuery* ArtistCountQuery::New(::google::protobuf::Arena* arena) const {
  ArtistCountQuery* n = new ArtistCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArtistCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ArtistCountQuery)
  type_ = 0;
}

bool ArtistCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ArtistCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ArtistCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ArtistCountQuery)
  return false;
#undef DO_
}

void ArtistCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ArtistCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ArtistCountQuery)
}

::google::protobuf::uint8* ArtistCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ArtistCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ArtistCountQuery)
  return target;
}

int ArtistCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ArtistCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtistCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ArtistCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArtistCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArtistCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ArtistCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ArtistCountQuery)
    MergeFrom(*source);
  }
}

void ArtistCountQuery::MergeFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ArtistCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ArtistCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistCountQuery::CopyFrom(const ArtistCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ArtistCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistCountQuery::IsInitialized() const {

  return true;
}

void ArtistCountQuery::Swap(ArtistCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArtistCountQuery::InternalSwap(ArtistCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArtistCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtistCountQuery_descriptor_;
  metadata.reflection = ArtistCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArtistCountQuery

// optional .pas.Type type = 1;
void ArtistCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type ArtistCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.ArtistCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void ArtistCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ArtistCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FolderCountQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FolderCountQuery::FolderCountQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.FolderCountQuery)
}

void FolderCountQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FolderCountQuery::FolderCountQuery(const FolderCountQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.FolderCountQuery)
}

void FolderCountQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
}

FolderCountQuery::~FolderCountQuery() {
  // @@protoc_insertion_point(destructor:pas.FolderCountQuery)
  SharedDtor();
}

void FolderCountQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FolderCountQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolderCountQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FolderCountQuery_descriptor_;
}

const FolderCountQuery& FolderCountQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

FolderCountQuery* FolderCountQuery::default_instance_ = NULL;

FolderCountQuery* FolderCountQuery::New(::google::protobuf::Arena* arena) const {
  FolderCountQuery* n = new FolderCountQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FolderCountQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.FolderCountQuery)
  type_ = 0;
}

bool FolderCountQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.FolderCountQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.FolderCountQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.FolderCountQuery)
  return false;
#undef DO_
}

void FolderCountQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.FolderCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.FolderCountQuery)
}

::google::protobuf::uint8* FolderCountQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.FolderCountQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.FolderCountQuery)
  return target;
}

int FolderCountQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.FolderCountQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderCountQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.FolderCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FolderCountQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FolderCountQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.FolderCountQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.FolderCountQuery)
    MergeFrom(*source);
  }
}

void FolderCountQuery::MergeFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.FolderCountQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FolderCountQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderCountQuery::CopyFrom(const FolderCountQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.FolderCountQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderCountQuery::IsInitialized() const {

  return true;
}

void FolderCountQuery::Swap(FolderCountQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FolderCountQuery::InternalSwap(FolderCountQuery* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FolderCountQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FolderCountQuery_descriptor_;
  metadata.reflection = FolderCountQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FolderCountQuery

// optional .pas.Type type = 1;
void FolderCountQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type FolderCountQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.FolderCountQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void FolderCountQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.FolderCountQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectQuery::kTypeFieldNumber;
const int SelectQuery::kColumnFieldNumber;
const int SelectQuery::kPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectQuery::SelectQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.SelectQuery)
}

void SelectQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SelectQuery::SelectQuery(const SelectQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.SelectQuery)
}

void SelectQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SelectQuery::~SelectQuery() {
  // @@protoc_insertion_point(destructor:pas.SelectQuery)
  SharedDtor();
}

void SelectQuery::SharedDtor() {
  column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SelectQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectQuery_descriptor_;
}

const SelectQuery& SelectQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

SelectQuery* SelectQuery::default_instance_ = NULL;

SelectQuery* SelectQuery::New(::google::protobuf::Arena* arena) const {
  SelectQuery* n = new SelectQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.SelectQuery)
  type_ = 0;
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SelectQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.SelectQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }

      // optional string column = 2;
      case 2: {
        if (tag == 18) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column().data(), this->column().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.column"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pattern;
        break;
      }

      // optional string pattern = 3;
      case 3: {
        if (tag == 26) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.SelectQuery.pattern"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.SelectQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.SelectQuery)
  return false;
#undef DO_
}

void SelectQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.SelectQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->column(), output);
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pattern(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.SelectQuery)
}

::google::protobuf::uint8* SelectQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.SelectQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column(), target);
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.SelectQuery.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pattern(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.SelectQuery)
  return target;
}

int SelectQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.SelectQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string column = 2;
  if (this->column().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column());
  }

  // optional string pattern = 3;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.SelectQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SelectQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.SelectQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.SelectQuery)
    MergeFrom(*source);
  }
}

void SelectQuery::MergeFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.SelectQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.column().size() > 0) {

    column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_);
  }
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
}

void SelectQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectQuery::CopyFrom(const SelectQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.SelectQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectQuery::IsInitialized() const {

  return true;
}

void SelectQuery::Swap(SelectQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectQuery::InternalSwap(SelectQuery* other) {
  std::swap(type_, other->type_);
  column_.Swap(&other->column_);
  pattern_.Swap(&other->pattern_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectQuery_descriptor_;
  metadata.reflection = SelectQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectQuery

// optional .pas.Type type = 1;
void SelectQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type SelectQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void SelectQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.SelectQuery.type)
}

// optional string column = 2;
void SelectQuery::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SelectQuery::column() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.column)
  return column_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_column(const ::std::string& value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.column)
}
 void SelectQuery::set_column(const char* value) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.column)
}
 void SelectQuery::set_column(const char* value, size_t size) {
  
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.column)
}
 ::std::string* SelectQuery::mutable_column() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelectQuery::release_column() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.column)
  
  return column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    
  } else {
    
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.column)
}

// optional string pattern = 3;
void SelectQuery::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SelectQuery::pattern() const {
  // @@protoc_insertion_point(field_get:pas.SelectQuery.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.SelectQuery.pattern)
}
 void SelectQuery::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.SelectQuery.pattern)
}
 void SelectQuery::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.SelectQuery.pattern)
}
 ::std::string* SelectQuery::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:pas.SelectQuery.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SelectQuery::release_pattern() {
  // @@protoc_insertion_point(field_release:pas.SelectQuery.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SelectQuery::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:pas.SelectQuery.pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentQuery::kTypeFieldNumber;
const int ContentQuery::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentQuery::ContentQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pas.ContentQuery)
}

void ContentQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContentQuery::ContentQuery(const ContentQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pas.ContentQuery)
}

void ContentQuery::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContentQuery::~ContentQuery() {
  // @@protoc_insertion_point(destructor:pas.ContentQuery)
  SharedDtor();
}

void ContentQuery::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ContentQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentQuery_descriptor_;
}

const ContentQuery& ContentQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();
  return *default_instance_;
}

ContentQuery* ContentQuery::default_instance_ = NULL;

ContentQuery* ContentQuery::New(::google::protobuf::Arena* arena) const {
  ContentQuery* n = new ContentQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:pas.ContentQuery)
  type_ = 0;
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ContentQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pas.ContentQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pas.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pas::Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pas.ContentQuery.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pas.ContentQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pas.ContentQuery)
  return false;
#undef DO_
}

void ContentQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pas.ContentQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.ContentQuery.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:pas.ContentQuery)
}

::google::protobuf::uint8* ContentQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pas.ContentQuery)
  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pas.ContentQuery.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pas.ContentQuery)
  return target;
}

int ContentQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pas.ContentQuery)
  int total_size = 0;

  // optional .pas.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pas.ContentQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ContentQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pas.ContentQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pas.ContentQuery)
    MergeFrom(*source);
  }
}

void ContentQuery::MergeFrom(const ContentQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pas.ContentQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void ContentQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pas.ContentQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentQuery::CopyFrom(const ContentQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pas.ContentQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentQuery::IsInitialized() const {

  return true;
}

void ContentQuery::Swap(ContentQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentQuery::InternalSwap(ContentQuery* other) {
  std::swap(type_, other->type_);
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentQuery_descriptor_;
  metadata.reflection = ContentQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentQuery

// optional .pas.Type type = 1;
void ContentQuery::clear_type() {
  type_ = 0;
}
 ::pas::Type ContentQuery::type() const {
  // @@protoc_insertion_point(field_get:pas.ContentQuery.type)
  return static_cast< ::pas::Type >(type_);
}
 void ContentQuery::set_type(::pas::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pas.ContentQuery.type)
}

// optional string path = 2;
void ContentQuery::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ContentQuery::path() const {
  // @@protoc_insertion_point(field_get:pas.ContentQuery.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContentQuery::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pas.ContentQuery.path)
}
 void ContentQuery::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pas.ContentQuery.path)
}
 void ContentQuery::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pas.ContentQuery.path)
}
 ::std::string* ContentQuery::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:pas.ContentQuery.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ContentQuery::release_path() {
  // @@protoc_insertion_point(field_release:pas.ContentQuery.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ContentQuery::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:pas.ContentQuery.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pas

// @@protoc_insertion_point(global_scope)
