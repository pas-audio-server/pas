// Code generated by protoc-gen-go.
// source: commands.proto
// DO NOT EDIT!

/*
Package pas is a generated protocol buffer package.

It is generated from these files:
	commands.proto

It has these top-level messages:
	Row
	DacInfo
	SelectResult
	GenericPB
	PlayTrackCommand
	PauseDeviceCommand
	ResumeDeviceCommand
	ClearDeviceCommand
	StopDeviceCommand
	WhoDeviceCommand
	WhatDeviceCommand
	TrackCountQuery
	ArtistCountQuery
	FolderCountQuery
	SelectQuery
	WhenDeviceCommand
	OneInteger
	OneString
	OneFloat
	TwoIntegers
*/
package pas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_GENERIC           Type = 0
	Type_PLAY_TRACK_DEVICE Type = 1
	Type_PAUSE_DEVICE      Type = 2
	Type_RESUME_DEVICE     Type = 3
	Type_STOP_DEVICE       Type = 4
	Type_WHO_DEVICE        Type = 5
	Type_WHAT_DEVICE       Type = 6
	Type_TRACK_COUNT       Type = 7
	Type_ARTIST_COUNT      Type = 8
	Type_FOLDER_COUNT      Type = 9
	Type_SELECT_QUERY      Type = 10
	Type_RESERVED_01       Type = 11
	Type_WHEN_DEVICE       Type = 12
	Type_CLEAR_DEVICE      Type = 13
	Type_SELECT_RESULT     Type = 14
	Type_ROW               Type = 15
	Type_ONE_INT           Type = 16
	Type_ONE_STRING        Type = 17
	Type_ONE_FLOAT         Type = 18
	Type_DAC_INFO_COMMAND  Type = 19
	Type_NEXT_DEVICE       Type = 20
	Type_COPY_QUEUE        Type = 21
	Type_MOVE_QUEUE        Type = 22
	Type_APPEND_QUEUE      Type = 23
)

var Type_name = map[int32]string{
	0:  "GENERIC",
	1:  "PLAY_TRACK_DEVICE",
	2:  "PAUSE_DEVICE",
	3:  "RESUME_DEVICE",
	4:  "STOP_DEVICE",
	5:  "WHO_DEVICE",
	6:  "WHAT_DEVICE",
	7:  "TRACK_COUNT",
	8:  "ARTIST_COUNT",
	9:  "FOLDER_COUNT",
	10: "SELECT_QUERY",
	11: "RESERVED_01",
	12: "WHEN_DEVICE",
	13: "CLEAR_DEVICE",
	14: "SELECT_RESULT",
	15: "ROW",
	16: "ONE_INT",
	17: "ONE_STRING",
	18: "ONE_FLOAT",
	19: "DAC_INFO_COMMAND",
	20: "NEXT_DEVICE",
	21: "COPY_QUEUE",
	22: "MOVE_QUEUE",
	23: "APPEND_QUEUE",
}
var Type_value = map[string]int32{
	"GENERIC":           0,
	"PLAY_TRACK_DEVICE": 1,
	"PAUSE_DEVICE":      2,
	"RESUME_DEVICE":     3,
	"STOP_DEVICE":       4,
	"WHO_DEVICE":        5,
	"WHAT_DEVICE":       6,
	"TRACK_COUNT":       7,
	"ARTIST_COUNT":      8,
	"FOLDER_COUNT":      9,
	"SELECT_QUERY":      10,
	"RESERVED_01":       11,
	"WHEN_DEVICE":       12,
	"CLEAR_DEVICE":      13,
	"SELECT_RESULT":     14,
	"ROW":               15,
	"ONE_INT":           16,
	"ONE_STRING":        17,
	"ONE_FLOAT":         18,
	"DAC_INFO_COMMAND":  19,
	"NEXT_DEVICE":       20,
	"COPY_QUEUE":        21,
	"MOVE_QUEUE":        22,
	"APPEND_QUEUE":      23,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// This is a return type
type Row struct {
	Type    Type              `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Results map[string]string `protobuf:"bytes,2,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Row) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *Row) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

// This is a command type
// It expects a SelectResult in response.
type DacInfo struct {
	Type Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Row  []*Row `protobuf:"bytes,2,rep,name=row" json:"row,omitempty"`
}

func (m *DacInfo) Reset()                    { *m = DacInfo{} }
func (m *DacInfo) String() string            { return proto.CompactTextString(m) }
func (*DacInfo) ProtoMessage()               {}
func (*DacInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DacInfo) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *DacInfo) GetRow() []*Row {
	if m != nil {
		return m.Row
	}
	return nil
}

// This is a return type
type SelectResult struct {
	Type Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Row  []*Row `protobuf:"bytes,2,rep,name=row" json:"row,omitempty"`
}

func (m *SelectResult) Reset()                    { *m = SelectResult{} }
func (m *SelectResult) String() string            { return proto.CompactTextString(m) }
func (*SelectResult) ProtoMessage()               {}
func (*SelectResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SelectResult) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *SelectResult) GetRow() []*Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type GenericPB struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
}

func (m *GenericPB) Reset()                    { *m = GenericPB{} }
func (m *GenericPB) String() string            { return proto.CompactTextString(m) }
func (*GenericPB) ProtoMessage()               {}
func (*GenericPB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GenericPB) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

// This is a send type.
// No respnse is expected.
type PlayTrackCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	TrackId  uint64 `protobuf:"varint,3,opt,name=track_id,json=trackId" json:"track_id,omitempty"`
}

func (m *PlayTrackCommand) Reset()                    { *m = PlayTrackCommand{} }
func (m *PlayTrackCommand) String() string            { return proto.CompactTextString(m) }
func (*PlayTrackCommand) ProtoMessage()               {}
func (*PlayTrackCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayTrackCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *PlayTrackCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *PlayTrackCommand) GetTrackId() uint64 {
	if m != nil {
		return m.TrackId
	}
	return 0
}

// This is a send type.
// No respnse is expected.
type PauseDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *PauseDeviceCommand) Reset()                    { *m = PauseDeviceCommand{} }
func (m *PauseDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*PauseDeviceCommand) ProtoMessage()               {}
func (*PauseDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PauseDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *PauseDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// No respnse is expected.
type ResumeDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *ResumeDeviceCommand) Reset()                    { *m = ResumeDeviceCommand{} }
func (m *ResumeDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*ResumeDeviceCommand) ProtoMessage()               {}
func (*ResumeDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResumeDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *ResumeDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// No respnse is expected.
type ClearDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *ClearDeviceCommand) Reset()                    { *m = ClearDeviceCommand{} }
func (m *ClearDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*ClearDeviceCommand) ProtoMessage()               {}
func (*ClearDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ClearDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *ClearDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// No respnse is expected.
type StopDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *StopDeviceCommand) Reset()                    { *m = StopDeviceCommand{} }
func (m *StopDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*StopDeviceCommand) ProtoMessage()               {}
func (*StopDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StopDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *StopDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// A OneString is expected back.
// Will combine all the device_id/one_strings together.
type WhoDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *WhoDeviceCommand) Reset()                    { *m = WhoDeviceCommand{} }
func (m *WhoDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*WhoDeviceCommand) ProtoMessage()               {}
func (*WhoDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WhoDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *WhoDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// A OneString is expected back.
// Will combine all the device_id/one_strings together.
type WhatDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *WhatDeviceCommand) Reset()                    { *m = WhatDeviceCommand{} }
func (m *WhatDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*WhatDeviceCommand) ProtoMessage()               {}
func (*WhatDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WhatDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *WhatDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a send type.
// A OneInteger is expected back.
type TrackCountQuery struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
}

func (m *TrackCountQuery) Reset()                    { *m = TrackCountQuery{} }
func (m *TrackCountQuery) String() string            { return proto.CompactTextString(m) }
func (*TrackCountQuery) ProtoMessage()               {}
func (*TrackCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TrackCountQuery) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

// This is a send type.
// A OneInteger is expected back.
type ArtistCountQuery struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
}

func (m *ArtistCountQuery) Reset()                    { *m = ArtistCountQuery{} }
func (m *ArtistCountQuery) String() string            { return proto.CompactTextString(m) }
func (*ArtistCountQuery) ProtoMessage()               {}
func (*ArtistCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ArtistCountQuery) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

type FolderCountQuery struct {
	Type Type `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
}

func (m *FolderCountQuery) Reset()                    { *m = FolderCountQuery{} }
func (m *FolderCountQuery) String() string            { return proto.CompactTextString(m) }
func (*FolderCountQuery) ProtoMessage()               {}
func (*FolderCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FolderCountQuery) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

// This is a send type.
// A SelectResult is expected back.
type SelectQuery struct {
	Type    Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Column  string `protobuf:"bytes,2,opt,name=column" json:"column,omitempty"`
	Pattern string `protobuf:"bytes,3,opt,name=pattern" json:"pattern,omitempty"`
}

func (m *SelectQuery) Reset()                    { *m = SelectQuery{} }
func (m *SelectQuery) String() string            { return proto.CompactTextString(m) }
func (*SelectQuery) ProtoMessage()               {}
func (*SelectQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SelectQuery) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *SelectQuery) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *SelectQuery) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

// This is a send type.
// A OneString is expected back.
// Will combine all the device_id/one_strings together.
type WhenDeviceCommand struct {
	Type     Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *WhenDeviceCommand) Reset()                    { *m = WhenDeviceCommand{} }
func (m *WhenDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*WhenDeviceCommand) ProtoMessage()               {}
func (*WhenDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WhenDeviceCommand) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *WhenDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// This is a return type.
type OneInteger struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *OneInteger) Reset()                    { *m = OneInteger{} }
func (m *OneInteger) String() string            { return proto.CompactTextString(m) }
func (*OneInteger) ProtoMessage()               {}
func (*OneInteger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OneInteger) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *OneInteger) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// This is a return type.
type OneString struct {
	Type  Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *OneString) Reset()                    { *m = OneString{} }
func (m *OneString) String() string            { return proto.CompactTextString(m) }
func (*OneString) ProtoMessage()               {}
func (*OneString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OneString) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *OneString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// This is a return type.
type OneFloat struct {
	Type  Type    `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
}

func (m *OneFloat) Reset()                    { *m = OneFloat{} }
func (m *OneFloat) String() string            { return proto.CompactTextString(m) }
func (*OneFloat) ProtoMessage()               {}
func (*OneFloat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *OneFloat) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *OneFloat) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TwoIntegers struct {
	Type   Type   `protobuf:"varint,1,opt,name=type,enum=pas.Type" json:"type,omitempty"`
	ValueA uint64 `protobuf:"varint,2,opt,name=value_a,json=valueA" json:"value_a,omitempty"`
	ValueB uint64 `protobuf:"varint,3,opt,name=value_b,json=valueB" json:"value_b,omitempty"`
}

func (m *TwoIntegers) Reset()                    { *m = TwoIntegers{} }
func (m *TwoIntegers) String() string            { return proto.CompactTextString(m) }
func (*TwoIntegers) ProtoMessage()               {}
func (*TwoIntegers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TwoIntegers) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_GENERIC
}

func (m *TwoIntegers) GetValueA() uint64 {
	if m != nil {
		return m.ValueA
	}
	return 0
}

func (m *TwoIntegers) GetValueB() uint64 {
	if m != nil {
		return m.ValueB
	}
	return 0
}

func init() {
	proto.RegisterType((*Row)(nil), "pas.Row")
	proto.RegisterType((*DacInfo)(nil), "pas.DacInfo")
	proto.RegisterType((*SelectResult)(nil), "pas.SelectResult")
	proto.RegisterType((*GenericPB)(nil), "pas.GenericPB")
	proto.RegisterType((*PlayTrackCommand)(nil), "pas.PlayTrackCommand")
	proto.RegisterType((*PauseDeviceCommand)(nil), "pas.PauseDeviceCommand")
	proto.RegisterType((*ResumeDeviceCommand)(nil), "pas.ResumeDeviceCommand")
	proto.RegisterType((*ClearDeviceCommand)(nil), "pas.ClearDeviceCommand")
	proto.RegisterType((*StopDeviceCommand)(nil), "pas.StopDeviceCommand")
	proto.RegisterType((*WhoDeviceCommand)(nil), "pas.WhoDeviceCommand")
	proto.RegisterType((*WhatDeviceCommand)(nil), "pas.WhatDeviceCommand")
	proto.RegisterType((*TrackCountQuery)(nil), "pas.TrackCountQuery")
	proto.RegisterType((*ArtistCountQuery)(nil), "pas.ArtistCountQuery")
	proto.RegisterType((*FolderCountQuery)(nil), "pas.FolderCountQuery")
	proto.RegisterType((*SelectQuery)(nil), "pas.SelectQuery")
	proto.RegisterType((*WhenDeviceCommand)(nil), "pas.WhenDeviceCommand")
	proto.RegisterType((*OneInteger)(nil), "pas.OneInteger")
	proto.RegisterType((*OneString)(nil), "pas.OneString")
	proto.RegisterType((*OneFloat)(nil), "pas.OneFloat")
	proto.RegisterType((*TwoIntegers)(nil), "pas.TwoIntegers")
	proto.RegisterEnum("pas.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("commands.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x53, 0xf2, 0x46,
	0x14, 0x2e, 0x04, 0x09, 0x1c, 0x10, 0x97, 0xf5, 0xb3, 0x76, 0x3a, 0xe3, 0xe4, 0xca, 0xf1, 0x82,
	0xaa, 0xbd, 0xe9, 0x78, 0xd3, 0xc6, 0x64, 0xd1, 0x4c, 0x21, 0x89, 0x9b, 0x20, 0xf5, 0xa6, 0x4c,
	0x84, 0xad, 0x32, 0x86, 0x84, 0x09, 0x8b, 0x0e, 0x3f, 0xa3, 0x3f, 0xa0, 0xff, 0xb5, 0xbb, 0xf9,
	0xf0, 0x7d, 0xdf, 0x2b, 0x74, 0x5e, 0xee, 0x78, 0x9e, 0x73, 0xf6, 0x39, 0xcf, 0x39, 0xec, 0x9e,
	0x40, 0x6b, 0x1c, 0xcf, 0x66, 0x41, 0x34, 0x59, 0x74, 0xe6, 0x49, 0xcc, 0x63, 0xac, 0xcc, 0x83,
	0x85, 0xf6, 0x6f, 0x09, 0x14, 0x1a, 0xbf, 0xe1, 0x9f, 0xa1, 0xc2, 0x57, 0x73, 0x76, 0x54, 0x3a,
	0x29, 0x9d, 0xb6, 0x2e, 0xeb, 0x1d, 0x11, 0xeb, 0xf8, 0x82, 0xa0, 0x29, 0x8d, 0x7f, 0x01, 0x35,
	0x61, 0x8b, 0x65, 0xc8, 0x17, 0x47, 0xe5, 0x13, 0xe5, 0xb4, 0x71, 0xb9, 0x9f, 0x66, 0x88, 0x93,
	0x1d, 0x9a, 0xf1, 0x24, 0xe2, 0xc9, 0x8a, 0x16, 0x59, 0xc7, 0x57, 0xd0, 0xfc, 0x3a, 0x80, 0x11,
	0x28, 0x2f, 0x6c, 0x95, 0xca, 0xd7, 0xa9, 0xfc, 0x89, 0xf7, 0x60, 0xeb, 0x35, 0x08, 0x97, 0x4c,
	0x08, 0x4a, 0x2e, 0x03, 0x57, 0xe5, 0xdf, 0x4a, 0x9a, 0x09, 0xaa, 0x19, 0x8c, 0xad, 0xe8, 0x9f,
	0x78, 0x9d, 0xad, 0x63, 0x50, 0x92, 0xf8, 0x2d, 0xb7, 0x54, 0x2b, 0x2c, 0x51, 0x49, 0x6a, 0x16,
	0x34, 0x3d, 0x16, 0xb2, 0x31, 0xcf, 0x7c, 0x7c, 0x8f, 0xd4, 0x19, 0xd4, 0x6f, 0x58, 0xc4, 0x92,
	0xe9, 0xd8, 0xbd, 0x5e, 0xa3, 0xa3, 0x4d, 0x01, 0xb9, 0x61, 0xb0, 0xf2, 0x93, 0x60, 0xfc, 0x62,
	0x64, 0x03, 0x5f, 0x57, 0xfa, 0x27, 0xa8, 0x4f, 0xd8, 0xeb, 0x74, 0xcc, 0x46, 0xd3, 0x49, 0x3a,
	0x8d, 0x0a, 0xad, 0x65, 0x84, 0x35, 0xc1, 0x3f, 0x42, 0x8d, 0x4b, 0x2d, 0x19, 0x53, 0xd2, 0x98,
	0x9a, 0x62, 0x6b, 0xa2, 0xb9, 0x80, 0xdd, 0x60, 0xb9, 0x60, 0x66, 0x9a, 0xbb, 0x81, 0x62, 0xda,
	0x1d, 0xec, 0xca, 0x69, 0xcd, 0x36, 0x28, 0x29, 0x4c, 0x1a, 0x21, 0x0b, 0x92, 0xcd, 0x29, 0x3a,
	0xd0, 0xf6, 0x78, 0x3c, 0xdf, 0x9c, 0xa0, 0x0d, 0x68, 0xf8, 0x1c, 0x6f, 0xd4, 0xe0, 0xf0, 0x39,
	0xe0, 0x9b, 0x13, 0x3c, 0x87, 0x9d, 0xfc, 0x3e, 0x2d, 0x23, 0x7e, 0xb7, 0x64, 0xe2, 0x3d, 0xad,
	0xb9, 0x85, 0x17, 0x80, 0xf4, 0x84, 0x4f, 0x17, 0xfc, 0x53, 0x47, 0xba, 0x71, 0x38, 0x61, 0xc9,
	0xc7, 0x8f, 0xfc, 0x0d, 0x8d, 0xec, 0x89, 0x7d, 0x24, 0x1b, 0x1f, 0x40, 0x75, 0x1c, 0x87, 0xcb,
	0x59, 0x94, 0xbf, 0xf8, 0x1c, 0xe1, 0x23, 0x50, 0xe7, 0x01, 0xe7, 0x2c, 0x89, 0xd2, 0x0b, 0x5e,
	0xa7, 0x05, 0xcc, 0x06, 0xc9, 0xa2, 0xcd, 0x0d, 0x52, 0x07, 0x70, 0x22, 0x66, 0x45, 0x9c, 0x3d,
	0xb1, 0x64, 0x9d, 0xd2, 0x37, 0x0b, 0xaa, 0x92, 0x2f, 0x28, 0xed, 0x0f, 0xa8, 0x0b, 0x09, 0x8f,
	0x27, 0xd3, 0xe8, 0xe9, 0x53, 0x0a, 0xc5, 0x8a, 0xd3, 0x7e, 0x87, 0x9a, 0x50, 0xe8, 0x86, 0x71,
	0xc0, 0x3f, 0x25, 0x50, 0x2e, 0x04, 0xc4, 0xd8, 0xfd, 0xb7, 0x38, 0xef, 0x62, 0xb1, 0x4e, 0xe3,
	0x10, 0xd4, 0xf4, 0xd8, 0x28, 0xc8, 0x1b, 0xa9, 0xa6, 0x50, 0xff, 0x12, 0x78, 0xcc, 0x17, 0x4b,
	0x16, 0xb8, 0x3e, 0xfb, 0x4f, 0x81, 0x8a, 0x14, 0xc0, 0x0d, 0x50, 0x6f, 0x88, 0x4d, 0xa8, 0x65,
	0xa0, 0x1f, 0xf0, 0x3e, 0xb4, 0xdd, 0x9e, 0xfe, 0x30, 0xf2, 0xa9, 0x6e, 0xfc, 0x39, 0x32, 0xc9,
	0xbd, 0x65, 0x10, 0x54, 0x12, 0x8b, 0xbd, 0xe9, 0xea, 0x03, 0x8f, 0x14, 0x4c, 0x19, 0xb7, 0x61,
	0x9b, 0x12, 0x6f, 0xd0, 0x7f, 0xa7, 0x14, 0xbc, 0x23, 0x2e, 0x8a, 0xef, 0xb8, 0x05, 0x51, 0xc1,
	0x2d, 0x80, 0xe1, 0xad, 0x53, 0xe0, 0x2d, 0x99, 0x30, 0xbc, 0xd5, 0xfd, 0x82, 0xa8, 0x4a, 0x22,
	0x2b, 0x64, 0x38, 0x03, 0xdb, 0x47, 0xaa, 0xac, 0xa3, 0x53, 0xdf, 0xf2, 0xfc, 0x9c, 0xa9, 0x49,
	0xa6, 0xeb, 0xf4, 0x4c, 0x42, 0x73, 0xa6, 0x2e, 0x19, 0x8f, 0xf4, 0x88, 0xe1, 0x8f, 0xee, 0x06,
	0x84, 0x3e, 0x20, 0x90, 0x32, 0xc2, 0x0b, 0xa1, 0xf7, 0xc4, 0x1c, 0x9d, 0x5f, 0xa0, 0x46, 0x56,
	0x88, 0xd8, 0x45, 0xa1, 0xa6, 0x3c, 0x63, 0xf4, 0x88, 0x4e, 0x0b, 0x66, 0x5b, 0xfa, 0xcf, 0x55,
	0x64, 0x1b, 0x3d, 0x1f, 0xb5, 0xb0, 0x2a, 0x3e, 0x92, 0xce, 0x10, 0xed, 0xc8, 0x89, 0x38, 0x36,
	0x19, 0x59, 0xa2, 0x1c, 0x92, 0x4d, 0x48, 0xe0, 0xf9, 0xd4, 0xb2, 0x6f, 0x50, 0x1b, 0x6f, 0x8b,
	0xab, 0x21, 0x70, 0xb7, 0xe7, 0xe8, 0x3e, 0xc2, 0xe2, 0xcf, 0x43, 0xa6, 0x6e, 0x88, 0xdc, 0xae,
	0x23, 0x1c, 0xf6, 0xfb, 0xba, 0x6d, 0xa2, 0x5d, 0x69, 0xc0, 0x26, 0x7f, 0xbd, 0x77, 0xba, 0x27,
	0x55, 0x0c, 0xc7, 0x7d, 0x90, 0x96, 0x07, 0x04, 0xed, 0x4b, 0xdc, 0x77, 0xee, 0x49, 0x8e, 0x0f,
	0xd2, 0xc6, 0x5d, 0x97, 0xd8, 0x66, 0xce, 0x1c, 0x3e, 0x56, 0xd3, 0xef, 0xf7, 0xaf, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0xb2, 0x8b, 0xd1, 0xd1, 0x07, 0x00, 0x00,
}
