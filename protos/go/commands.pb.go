// Code generated by protoc-gen-go.
// source: commands.proto
// DO NOT EDIT!

/*
Package pas is a generated protocol buffer package.

It is generated from these files:
	commands.proto

It has these top-level messages:
	PlayTrackCommand
	PauseDeviceCommand
	ResumeDeviceCommand
	StopDeviceCommand
	TrackQueryCommand
	TimeQueryCommand
	TrackCountQuery
	ArtistCountQuery
	FolderCountQuery
	SelectQuery
	ContentQuery
*/
package pas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlayTrackCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	TrackId  uint64 `protobuf:"varint,2,opt,name=track_id,json=trackId" json:"track_id,omitempty"`
}

func (m *PlayTrackCommand) Reset()                    { *m = PlayTrackCommand{} }
func (m *PlayTrackCommand) String() string            { return proto.CompactTextString(m) }
func (*PlayTrackCommand) ProtoMessage()               {}
func (*PlayTrackCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlayTrackCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *PlayTrackCommand) GetTrackId() uint64 {
	if m != nil {
		return m.TrackId
	}
	return 0
}

type PauseDeviceCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *PauseDeviceCommand) Reset()                    { *m = PauseDeviceCommand{} }
func (m *PauseDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*PauseDeviceCommand) ProtoMessage()               {}
func (*PauseDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PauseDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type ResumeDeviceCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *ResumeDeviceCommand) Reset()                    { *m = ResumeDeviceCommand{} }
func (m *ResumeDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*ResumeDeviceCommand) ProtoMessage()               {}
func (*ResumeDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResumeDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type StopDeviceCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *StopDeviceCommand) Reset()                    { *m = StopDeviceCommand{} }
func (m *StopDeviceCommand) String() string            { return proto.CompactTextString(m) }
func (*StopDeviceCommand) ProtoMessage()               {}
func (*StopDeviceCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StopDeviceCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type TrackQueryCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *TrackQueryCommand) Reset()                    { *m = TrackQueryCommand{} }
func (m *TrackQueryCommand) String() string            { return proto.CompactTextString(m) }
func (*TrackQueryCommand) ProtoMessage()               {}
func (*TrackQueryCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TrackQueryCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type TimeQueryCommand struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *TimeQueryCommand) Reset()                    { *m = TimeQueryCommand{} }
func (m *TimeQueryCommand) String() string            { return proto.CompactTextString(m) }
func (*TimeQueryCommand) ProtoMessage()               {}
func (*TimeQueryCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TimeQueryCommand) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

type TrackCountQuery struct {
}

func (m *TrackCountQuery) Reset()                    { *m = TrackCountQuery{} }
func (m *TrackCountQuery) String() string            { return proto.CompactTextString(m) }
func (*TrackCountQuery) ProtoMessage()               {}
func (*TrackCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ArtistCountQuery struct {
}

func (m *ArtistCountQuery) Reset()                    { *m = ArtistCountQuery{} }
func (m *ArtistCountQuery) String() string            { return proto.CompactTextString(m) }
func (*ArtistCountQuery) ProtoMessage()               {}
func (*ArtistCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type FolderCountQuery struct {
}

func (m *FolderCountQuery) Reset()                    { *m = FolderCountQuery{} }
func (m *FolderCountQuery) String() string            { return proto.CompactTextString(m) }
func (*FolderCountQuery) ProtoMessage()               {}
func (*FolderCountQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SelectQuery struct {
	Column  string `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern" json:"pattern,omitempty"`
}

func (m *SelectQuery) Reset()                    { *m = SelectQuery{} }
func (m *SelectQuery) String() string            { return proto.CompactTextString(m) }
func (*SelectQuery) ProtoMessage()               {}
func (*SelectQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SelectQuery) GetColumn() string {
	if m != nil {
		return m.Column
	}
	return ""
}

func (m *SelectQuery) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type ContentQuery struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *ContentQuery) Reset()                    { *m = ContentQuery{} }
func (m *ContentQuery) String() string            { return proto.CompactTextString(m) }
func (*ContentQuery) ProtoMessage()               {}
func (*ContentQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ContentQuery) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*PlayTrackCommand)(nil), "pas.PlayTrackCommand")
	proto.RegisterType((*PauseDeviceCommand)(nil), "pas.PauseDeviceCommand")
	proto.RegisterType((*ResumeDeviceCommand)(nil), "pas.ResumeDeviceCommand")
	proto.RegisterType((*StopDeviceCommand)(nil), "pas.StopDeviceCommand")
	proto.RegisterType((*TrackQueryCommand)(nil), "pas.TrackQueryCommand")
	proto.RegisterType((*TimeQueryCommand)(nil), "pas.TimeQueryCommand")
	proto.RegisterType((*TrackCountQuery)(nil), "pas.TrackCountQuery")
	proto.RegisterType((*ArtistCountQuery)(nil), "pas.ArtistCountQuery")
	proto.RegisterType((*FolderCountQuery)(nil), "pas.FolderCountQuery")
	proto.RegisterType((*SelectQuery)(nil), "pas.SelectQuery")
	proto.RegisterType((*ContentQuery)(nil), "pas.ContentQuery")
}

func init() { proto.RegisterFile("commands.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xa9, 0x96, 0xb6, 0x3b, 0x8a, 0x6e, 0x47, 0x90, 0x8a, 0x17, 0xc9, 0xc9, 0x93, 0x7f,
	0x3f, 0x80, 0x48, 0x45, 0xa8, 0xa7, 0xba, 0xed, 0x5d, 0xe2, 0x66, 0xc0, 0xc5, 0x4d, 0xb2, 0x24,
	0x13, 0xa1, 0xdf, 0x5e, 0x3b, 0xbb, 0x82, 0xde, 0xb6, 0xb7, 0xbc, 0xf7, 0xe6, 0x37, 0x21, 0x2f,
	0x70, 0x54, 0x7a, 0x6b, 0xb5, 0x33, 0xf1, 0xaa, 0x09, 0x9e, 0x3d, 0xee, 0x37, 0x3a, 0xaa, 0x17,
	0xc8, 0x97, 0xb5, 0xde, 0xac, 0x83, 0x2e, 0x3f, 0xe7, 0x6d, 0x8e, 0xe7, 0x90, 0x19, 0xfa, 0xaa,
	0x4a, 0x7a, 0xab, 0xcc, 0x6c, 0x70, 0x31, 0xb8, 0x1c, 0x16, 0x93, 0xd6, 0x58, 0x18, 0x3c, 0x83,
	0x09, 0x6f, 0x87, 0xb7, 0xd9, 0x9e, 0x64, 0x63, 0xd1, 0x0b, 0xa3, 0x6e, 0x01, 0x97, 0x3a, 0x45,
	0x7a, 0x92, 0xd9, 0x3e, 0xdb, 0xd4, 0x1d, 0x9c, 0x14, 0x14, 0x93, 0xdd, 0x85, 0xb9, 0x81, 0xe9,
	0x8a, 0x7d, 0xb3, 0x1b, 0x21, 0x0f, 0x7c, 0x4d, 0x14, 0x36, 0xbd, 0x88, 0x6b, 0xc8, 0xd7, 0x95,
	0xa5, 0xfe, 0xc0, 0x14, 0x8e, 0xbb, 0x0e, 0x93, 0x63, 0xc1, 0x14, 0x42, 0xfe, 0x18, 0xb8, 0x8a,
	0xfc, 0xdf, 0x7b, 0xf6, 0xb5, 0xa1, 0xf0, 0xc7, 0x7b, 0x80, 0x83, 0x15, 0xd5, 0x54, 0xb6, 0x12,
	0x4f, 0x61, 0x54, 0xfa, 0x3a, 0x59, 0x27, 0x77, 0x64, 0x45, 0xa7, 0x70, 0x06, 0xe3, 0x46, 0x33,
	0x53, 0x70, 0xd2, 0x7b, 0x56, 0xfc, 0x4a, 0xa5, 0xe0, 0x70, 0xee, 0x1d, 0x53, 0xb7, 0x10, 0x11,
	0x86, 0x3f, 0xd1, 0x47, 0xc7, 0xcb, 0xf9, 0x7d, 0x24, 0x7f, 0x7e, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x62, 0x0f, 0x16, 0x51, 0x05, 0x02, 0x00, 0x00,
}
